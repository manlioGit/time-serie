package com.github.manliogit.timeserie;

import static com.github.manliogit.stat.util.ListMatcher.closeTo;
import static com.github.manliogit.timeserie.Serie.DECOMPOSITION.MULTIPLICATIVE;
import static java.util.Arrays.asList;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Test;

public class SerieTest {

	@Test
	public void detrendMulti() {
		List<Double> y = asList(50.,61.,73.,84.,59.,72.,89.,100.,72.,93.,110.,126.,80.,100.,123.,140.);
		List<Double> expectedSeasonal = asList(1.07,1.19,0.8,0.92,1.09,1.16,0.79,0.96,1.09,1.22,0.76,0.92);
		
		assertThat(new Serie(y, 4, MULTIPLICATIVE).detrend(), closeTo(expectedSeasonal, 0.01));
	}
	
	@Test
	public void seasonMulti() {
		List<Double> y = asList(50.,61.,73.,84.,59.,72.,89.,100.,72.,93.,110.,126.,80.,100.,123.,140.);
		List<Double> expectedSeasonal = asList(0.78,0.93,1.08,1.19);
		
		assertThat(new Serie(y, 4, MULTIPLICATIVE).season(), closeTo(expectedSeasonal, 0.01));
	}
	
	@Test
	public void residualMulti() {
		List<Double> y = asList(50.,61.,73.,84.,59.,72.,89.,100.,72.,93.,110.,126.,80.,100.,123.,140.);
		List<Double> expectedResidual = asList(0.9896400024297665, 0.9978912049559723, 1.0200760588178088, 0.989268551319404, 1.006995915959131, 0.9770023754074381, 1.0108977222350162, 1.027513469540515, 1.0033640816111027, 1.0251064196365898, 0.9690262189471752, 0.9832179791400806);
		
		assertThat(new Serie(y, 4, MULTIPLICATIVE).residual(), closeTo(expectedResidual, 0.0001));
	}
	
	/***
	 * Monthly Airline Passenger Numbers 1949-1960
	 * The classic Box & Jenkins airline data. Monthly totals of international airline passengers, 1949 to 1960. 
	 * 
	 * see
	 * https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html
	 * https://anomaly.io/seasonal-trend-decomposition-in-r/
	 */
	@Test
	public void multiplicativeDecomposition() {
		List<Double> airPassengers = asList(112.,118.,132.,129.,121.,135.,148.,148.,136.,119.,104.,118.,115.,126.,141.,135.,125.,149.,170.,170.,158.,133.,114.,140.,145.,150.,178.,163.,172.,178.,199.,199.,184.,162.,146.,166.,171.,180.,193.,181.,183.,218.,230.,242.,209.,191.,172.,194.,196.,196.,236.,235.,229.,243.,264.,272.,237.,211.,180.,201.,204.,188.,235.,227.,234.,264.,302.,293.,259.,229.,203.,229.,242.,233.,267.,269.,270.,315.,364.,347.,312.,274.,237.,278.,284.,277.,317.,313.,318.,374.,413.,405.,355.,306.,271.,306.,315.,301.,356.,348.,355.,422.,465.,467.,404.,347.,305.,336.,340.,318.,362.,348.,363.,435.,491.,505.,404.,359.,310.,337.,360.,342.,406.,396.,420.,472.,548.,559.,463.,407.,362.,405.,417.,391.,419.,461.,472.,535.,622.,606.,508.,461.,390.,432.);
		
		List<Double> expectedMA = asList(126.7917,127.25,127.9583,128.5833,129.,129.75,131.25,133.0833,134.9167,136.4167,137.4167,138.75,140.9167,143.1667,145.7083,148.4167,151.5417,154.7083,157.125,159.5417,161.8333,164.125,166.6667,169.0833,171.25,173.5833,175.4583,176.8333,178.0417,180.1667,183.125,186.2083,189.0417,191.2917,193.5833,195.8333,198.0417,199.75,202.2083,206.25,210.4167,213.375,215.8333,218.5,220.9167,222.9167,224.0833,224.7083,225.3333,225.3333,224.9583,224.5833,224.4583,225.5417,228.,230.4583,232.25,233.9167,235.625,237.75,240.5,243.9583,247.1667,250.25,253.5,257.125,261.8333,266.6667,271.125,275.2083,278.5,281.9583,285.75,289.3333,293.25,297.1667,301.,305.4583,309.9583,314.4167,318.625,321.75,324.5,327.0833,329.5417,331.8333,334.4583,337.5417,340.5417,344.0833,348.25,353.,357.625,361.375,364.5,367.1667,369.4583,371.2083,372.1667,372.4167,372.75,373.625,375.25,377.9167,379.5,380.,380.7083,380.9583,381.8333,383.6667,386.5,390.3333,394.7083,398.625,402.5417,407.1667,411.875,416.3333,420.5,425.5,430.7083,435.125,437.7083,440.9583,445.8333,450.625,456.3333,461.375,465.2083,469.3333,472.75,475.0417);
		List<Double> expectedDetrend = asList(1.167269,1.163065,1.062846,0.9254699,0.8062016,0.9094412,0.8761905,0.9467752,1.04509,0.9896151,0.9096422,1.073874,1.206387,1.187427,1.084358,0.8961258,0.7522684,0.9049286,0.9228321,0.9401933,1.099897,0.9931455,1.032,1.052735,1.162044,1.146423,1.048682,0.9161169,0.8200328,0.9213691,0.9337884,0.9666592,1.020939,0.9461991,0.9453293,1.113191,1.161372,1.211514,1.033587,0.9260606,0.8174257,0.9091974,0.9081081,0.8970252,1.068276,1.054206,1.021941,1.081402,1.171598,1.207101,1.053528,0.9395176,0.8019306,0.8911879,0.8947368,0.8157657,1.011841,0.9704311,0.9931034,1.11041,1.255717,1.201025,1.047876,0.9150849,0.800789,0.8906174,0.9242521,0.87375,0.9847856,0.9774413,0.9694794,1.117186,1.273841,1.199309,1.063939,0.9220415,0.7873754,0.9101078,0.9162522,0.8809966,0.9949,0.972805,0.9799692,1.143439,1.253256,1.220492,1.061418,0.9065547,0.795791,0.8893194,0.9045226,0.8526912,0.9954561,0.9629886,0.9739369,1.149342,1.258599,1.258054,1.085535,0.9317521,0.8182428,0.8992974,0.9060626,0.8414553,0.9538867,0.9157895,0.9534858,1.141857,1.285901,1.316247,1.045278,0.9197267,0.7853901,0.8454061,0.8943174,0.8399509,0.985736,0.9511609,0.9988109,1.109283,1.272323,1.284688,1.057782,0.9229897,0.8119626,0.8987517,0.9138057,0.8474668,0.9006717,0.9822443,0.9984135,1.126217);
 		List<Double> expectedSeason = asList(0.9086244,0.8820663,1.005589,0.9741842,0.9796465,1.110813,1.224391,1.217759,1.058621,0.9201309,0.7997645,0.8972386);
		List<Double> expectedResidual = asList(0.9533463,0.9550865,1.003991,1.005802,1.008049,1.0136,0.9643044,1.073361,1.039281,1.01584,0.9285412,0.9667463,0.985295,0.9750924,1.024312,0.9739111,0.9406123,1.008571,1.015637,1.065899,1.093784,1.019464,1.053441,0.9477165,0.9490786,0.9414209,0.9906115,0.9956375,1.025343,1.026894,1.027695,1.095903,1.015265,0.9712733,0.9649698,1.002142,0.9485298,0.9948724,0.9763528,1.006444,1.022083,1.013329,0.9994318,1.016959,1.062339,1.082142,1.043173,0.9735233,0.9568816,0.9912478,0.9951896,1.021069,1.002708,0.9932563,0.9847158,0.9248349,1.006217,0.9961474,1.013736,0.9996377,1.025585,0.9862585,0.9898501,0.994516,1.001281,0.9926205,1.017199,0.9905718,0.9793123,1.003343,0.9896216,1.005738,1.040387,0.9848493,1.005023,1.002076,0.984509,1.014343,1.008395,0.9987872,0.9893704,0.9985842,1.000329,1.029372,1.023574,1.002245,1.002642,0.9852454,0.9950316,0.9911739,0.9954857,0.9666974,0.9899235,0.9885077,0.9941717,1.034686,1.027939,1.033089,1.025424,1.01263,1.023105,1.002295,0.9971806,0.9539593,0.9485851,0.9400578,0.9732958,1.027948,1.050237,1.080877,0.9873961,0.9995607,0.9820266,0.9422311,0.9842542,0.9522537,0.9802574,0.9763666,1.019563,0.9986232,1.039147,1.054961,0.9992076,1.003107,1.015252,1.001686,1.005702,0.9607745,0.8956659,1.008274,1.019157,1.013868);
 		
		Serie serie = new Serie(airPassengers, 12, MULTIPLICATIVE);
		assertThat(serie.trend(), closeTo(expectedMA, 0.0001));
		assertThat(serie.detrend(), closeTo(expectedDetrend, 0.0001));
		assertThat(serie.season(), closeTo(expectedSeason, 0.0001));
		assertThat(serie.residual(), closeTo(expectedResidual, 0.0001));
	}
	
	/***
	 *  Total quarterly beer production in Australia (in megalitres) from 1956:Q1 to 2008:Q3. 
	 * 
	 *  see
	 *  https://www.rdocumentation.org/packages/fpp/versions/0.5/topics/ausbeer
	 *  https://anomaly.io/seasonal-trend-decomposition-in-r/
	 */
	@Test
	public void additiveDecomposition() {
		List<Double> ausBeer = asList(236.,320.,272.,233.,237.,313.,261.,227.,250.,314.,286.,227.,260.,311.,295.,233.,257.,339.,279.,250.,270.,346.,294.,255.,278.,363.,313.,273.,300.,370.,331.,288.,306.,386.,335.,288.,308.,402.,353.,316.,325.,405.,393.,319.,327.,442.,383.,332.,361.,446.,387.,357.,374.,466.,410.,370.,379.,487.,419.,378.,393.,506.,458.,387.);
		
		List<Double> expectedMA = asList(265.375,264.625,262.375,260.25,261.125,262.875,266.125,269.25,270.5,271.375,272.125,274.,274.375,277.5,279.,279.125,282.875,285.375,288.125,290.625,292.25,295.375,299.875,304.5,309.5,313.125,316.25,320.375,323.,325.75,328.25,328.75,329.,331.25,335.5,341.25,346.875,349.375,354.75,360.125,360.75,365.625,369.,369.375,375.25,380.,381.,384.625,389.375,393.5,398.875,403.375,405.625,408.875,412.625,414.75,417.5,421.625,428.875,434.875);
		List<Double> expectedDetrend = asList(6.625,-31.625,-25.375,52.75,-0.125,-35.875,-16.125,44.75,15.5,-44.375,-12.125,37.,20.625,-44.5,-22.,59.875,-3.875,-35.375,-18.125,55.375,1.75,-40.375,-21.875,58.5,3.5,-40.125,-16.25,49.625,8.,-37.75,-22.25,57.25,6.,-43.25,-27.5,60.75,6.125,-33.375,-29.75,44.875,32.25,-46.625,-42.,72.625,7.75,-48.,-20.,61.375,-2.375,-36.5,-24.875,62.625,4.375,-38.875,-33.625,72.25,1.5,-43.625,-35.875,71.125);
		List<Double> expectedSeason = asList(-24.51667, 57.38333, 7.17500, -40.01667);
		List<Double> expectedResidual = asList(-0.55,8.391667,-0.8583333,-4.633333,-7.3,4.141667,8.391667,-12.63333,8.325,-4.358333,12.39167,-20.38333,13.45,-4.483333,2.516667,2.491667,-11.05,4.641667,6.391667,-2.008333,-5.425,-0.3583333,2.641667,1.116667,-3.675,-0.1083333,8.266667,-7.758333,0.825,2.266667,2.266667,-0.1333333,-1.175,-3.233333,-2.983333,3.366667,-1.05,6.641667,-5.233333,-12.50833,25.075,-6.608333,-17.48333,15.24167,0.575,-7.983333,4.516667,3.991667,-9.55,3.516667,-0.3583333,5.241667,-2.8,1.141667,-9.108333,14.86667,-5.675,-3.608333,-11.35833,13.74167);
		
		Serie serie = new Serie(ausBeer, 4);
		assertThat(serie.trend(), closeTo(expectedMA, 0.0001));
		assertThat(serie.detrend(), closeTo(expectedDetrend, 0.0001));
		assertThat(serie.season(), closeTo(expectedSeason, 0.0001));
		assertThat(serie.residual(), closeTo(expectedResidual, 0.0001));
	}
	
	@Test
	public void multiplicativeDecompositionWithMovingMedian() {
		List<Double> webTraffic = asList(32.,27.,30.,25.,14.,41.,32.,48.,22.,26.,23.,27.,40.,42.,46.,49.,26.,15.,20.,33.,32.,46.,32.,38.,27.,31.,65.,33.,42.,98.92576,37.,20.,23.,37.,30.,16.,33.,28.,37.,18.,38.,32.,16.,31.,34.,25.,27.,47.,48.,43.,44.,46.,25.,31.,40.,45.,46.,48.,33.,29.,26.,43.,71.,43.,51.,34.,47.59135,30.,47.,49.,49.,48.,83.65116,36.,33.,45.,53.,48.,30.,68.82951,20.,18.,76.18019,47.,35.,52.,50.,27.,27.,55.,58.,51.,51.,52.,37.,36.,44.,51.,122.5844,48.,54.,35.,37.,60.,54.,57.,40.,35.,22.,34.,50.,64.,45.,50.,59.,29.,23.,60.,56.,58.,53.,163.726,37.,28.,61.,74.,36.,51.,52.,30.,31.,59.,73.,64.,82.,63.,37.,53.,89.,89.,84.,96.,71.,55.,63.,106.,76.,102.,113.,59.,49.,50.,71.,96.,99.,100.,71.,58.,46.,83.,66.,200.8601,61.,67.,58.,46.,83.,76.,200.8601,67.,74.,49.,48.,74.,89.,86.,149.7946,78.,49.,61.,81.,98.,230.2393,76.,65.,46.,37.,89.,105.,87.,77.,61.,101.512,48.,81.,75.,91.,91.,77.,48.,29.,85.,102.,95.,94.,78.,46.,58.,88.,107.,114.,71.,82.,49.,45.,92.,99.,79.,180.7076,86.,49.,44.,77.,94.,100.,91.,70.,51.,37.,88.,90.,105.,89.,76.,48.,88.695,91.,101.,254.2059,75.,93.,49.,36.,92.,75.,122.,85.,86.,61.,45.,90.,101.,86.,77.,94.,45.,45.,70.,266.3343,103.,105.,63.,26.,48.,86.,80.,86.,73.,71.,42.,58.,92.,86.,90.,81.,76.,74.,50.,77.,83.,79.,76.,57.,32.,46.,61.,72.,91.,79.,63.,38.,73.71621,74.,85.,64.,86.,75.,43.,43.,73.,84.,84.,71.,68.,39.,66.40744,74.,76.,73.,183.5646,70.,46.,44.,80.,81.,64.,62.,63.,38.,40.,192.1799,80.,73.,78.,67.,35.,51.,68.,67.,71.,63.,54.,54.,46.,90.,84.,61.,69.,48.,35.,47.,56.,82.,75.,64.,66.,43.,91.23514,84.,72.,80.,166.5367,61.,39.,54.,80.,73.,90.,69.,59.,44.,117.2549,84.,100.,94.,87.,86.,60.,54.,97.,86.,85.,78.,52.,67.,41.,75.,79.,68.,80.,75.,49.,42.,236.1937,67.,76.,260.2583,83.,50.,38.,82.,68.,76.,71.,52.,27.,73.71621,53.,53.,48.,35.,40.,28.,32.,60.,56.,49.,32.,61.,43.,45.,73.,59.,65.,76.,60.,42.,32.,64.,64.,63.,87.,75.,45.,49.,84.,99.,160.9233,72.,70.,45.,53.,81.,79.,94.,78.,85.,42.,40.,71.,77.,69.,60.,61.,45.,36.,127.9528,85.,84.,79.,55.,36.,42.,105.,56.,82.,68.,81.,36.,52.,88.,98.,91.,86.,76.,119.9147,39.,79.,75.,83.,76.,73.,35.,114.6051,58.,77.,82.,82.,62.,41.,48.,65.,80.,77.,87.,71.,38.,35.,79.,87.,89.,87.,57.,42.,40.,71.,82.,200.8601,82.,65.,106.7174,59.,74.,74.,84.,79.,72.,48.,73.71621,81.,98.,79.,71.,79.,47.,50.,81.,88.,96.,80.,88.,32.,46.,82.,101.,80.,69.,0.,40.,48.,221.3559,104.,91.,114.,110.,66.,59.,100.,100.,96.,92.,99.,117.2549,62.,66.,119.,107.,93.,102.,46.,49.,99.,117.,110.,107.,100.,42.,42.,107.,101.,109.,102.,125.,61.,52.,97.,108.,96.,100.,96.,46.,101.512,80.,96.,115.,121.,114.,44.,43.,111.,92.,257.2292,99.,93.,42.,48.,91.,127.,96.,109.,81.,37.,93.78712,113.,127.,376.1436,127.,97.,44.,36.,84.,92.,90.,110.,88.,44.,44.,93.,100.,96.,101.,82.,51.,42.,107.,248.1774,79.,117.,103.,46.,36.,104.,120.,101.,97.,82.,43.,47.,95.,137.,356.8829,106.,84.,52.,50.,106.,132.,98.,97.,109.,64.,44.,103.,113.,111.,107.,95.,50.,53.,124.,363.2844,136.,144.,97.,59.,62.,251.1886,132.,123.,103.,86.,46.,48.,102.,132.,112.,125.,111.,51.,59.,116.,118.,146.,127.,109.,55.,40.,89.,99.,272.4335,105.,74.,39.,33.,113.,114.,102.,116.,105.,60.,70.,119.,312.6205,126.,138.,115.,84.,66.,132.,148.,114.,120.,122.,59.,65.,129.,133.,151.,141.,158.,68.,66.,171.,166.,171.,160.,138.,64.,40.,107.,138.);
		List<Double> expectedMM = asList(30.,30.,30.,30.,30.,30.,26.,26.,27.,27.,27.,27.,40.,40.,40.,40.,33.,32.,32.,32.,32.,32.,32.,32.,33.,33.,38.,37.,37.,37.,37.,37.,30.,30.,28.,30.,30.,30.,32.,32.,31.,32.,31.,31.,31.,31.,34.,43.,44.,44.,44.,43.,43.,44.,45.,40.,40.,40.,43.,43.,43.,43.,43.,43.,43.,47.,47.,47.59135,47.59135,48.,48.,48.,48.,48.,48.,45.,45.,45.,45.,48.,47.,35.,47.,47.,47.,47.,47.,50.,51.,51.,51.,51.,51.,51.,51.,51.,48.,48.,48.,48.,51.,54.,54.,54.,40.,40.,40.,40.,40.,40.,45.,50.,50.,50.,50.,50.,56.,56.,56.,56.,56.,56.,58.,53.,51.,51.,51.,51.,51.,51.,52.,59.,63.,63.,63.,64.,64.,82.,84.,84.,84.,84.,84.,76.,76.,76.,76.,76.,76.,71.,71.,71.,71.,71.,71.,71.,83.,71.,71.,66.,66.,66.,66.,66.,67.,67.,67.,74.,74.,74.,74.,74.,74.,74.,78.,78.,78.,81.,81.,81.,78.,76.,76.,76.,76.,76.,76.,77.,77.,87.,87.,81.,77.,77.,81.,81.,77.,77.,77.,85.,85.,85.,85.,85.,85.,88.,88.,88.,78.,82.,82.,82.,82.,82.,79.,82.,86.,86.,86.,79.,79.,86.,86.,77.,77.,77.,88.,88.,88.,88.,88.,88.,88.695,89.,89.,89.,88.695,91.,91.,91.,92.,75.,75.,85.,85.,85.,85.,85.,86.,86.,86.,86.,86.,86.,77.,77.,77.,94.,70.,70.,70.,86.,80.,80.,73.,73.,73.,73.,73.,73.,73.,81.,81.,81.,81.,77.,77.,77.,76.,76.,76.,76.,61.,61.,61.,61.,63.,63.,72.,73.71621,74.,73.71621,73.71621,74.,74.,74.,73.,73.,75.,73.,71.,71.,71.,71.,71.,71.,73.,73.,73.,73.,73.,73.,70.,64.,63.,63.,63.,63.,63.,63.,73.,73.,73.,73.,68.,67.,67.,67.,63.,63.,63.,63.,63.,61.,61.,61.,61.,61.,56.,56.,56.,56.,64.,64.,66.,75.,72.,72.,80.,80.,80.,72.,72.,73.,73.,69.,69.,69.,73.,73.,84.,84.,87.,87.,87.,86.,87.,86.,86.,85.,78.,78.,78.,75.,75.,68.,68.,75.,75.,75.,75.,68.,75.,75.,76.,76.,76.,76.,76.,76.,71.,68.,68.,71.,68.,53.,53.,52.,48.,48.,40.,40.,40.,40.,40.,49.,49.,49.,49.,49.,59.,61.,60.,60.,60.,60.,64.,63.,63.,64.,64.,64.,64.,75.,84.,75.,72.,72.,72.,72.,72.,72.,78.,79.,79.,79.,78.,77.,71.,69.,61.,61.,61.,61.,61.,61.,79.,79.,79.,79.,79.,56.,56.,56.,68.,68.,68.,68.,81.,81.,86.,86.,88.,88.,86.,79.,79.,76.,76.,75.,76.,75.,76.,76.,77.,77.,77.,62.,65.,65.,65.,65.,71.,71.,71.,77.,77.,79.,79.,79.,79.,79.,71.,71.,71.,71.,71.,82.,82.,82.,74.,74.,74.,74.,74.,74.,74.,79.,79.,73.71621,79.,79.,79.,79.,79.,79.,80.,81.,81.,81.,82.,82.,80.,80.,69.,69.,69.,69.,69.,69.,91.,104.,104.,104.,100.,100.,100.,96.,96.,99.,99.,96.,96.,99.,99.,102.,93.,93.,99.,99.,99.,102.,100.,100.,100.,107.,101.,101.,101.,102.,102.,102.,101.,102.,97.,97.,96.,96.,97.,96.,96.,96.,96.,101.512,101.512,96.,111.,111.,111.,99.,93.,93.,93.,92.,93.,93.,93.,91.,91.,93.78712,96.,96.,109.,113.,113.,113.,113.,97.,92.,90.,90.,88.,88.,88.,90.,90.,93.,93.,93.,93.,93.,96.,96.,82.,82.,103.,103.,103.,103.,103.,103.,101.,97.,97.,97.,95.,95.,95.,95.,95.,95.,95.,106.,106.,98.,97.,98.,98.,98.,98.,98.,103.,107.,103.,103.,103.,107.,107.,107.,124.,124.,124.,124.,136.,132.,123.,103.,103.,103.,103.,102.,102.,102.,102.,111.,111.,111.,112.,112.,116.,116.,116.,116.,116.,109.,99.,99.,99.,89.,89.,89.,99.,105.,102.,102.,105.,105.,105.,105.,105.,116.,119.,119.,119.,119.,126.,126.,115.,115.,120.,120.,120.,120.,120.,122.,129.,133.,133.,133.,141.,151.,158.,160.,160.,160.,160.,138.,138.,138.,107.,107.);
		
		Serie serie = new Serie(webTraffic, 7);
		assertThat(serie.trend(), closeTo(expectedMM, 0.001));
		
	}
}