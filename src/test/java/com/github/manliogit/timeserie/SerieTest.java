package com.github.manliogit.timeserie;

import static com.github.manliogit.timeserie.util.ListMatcher.deltaEqual;
import static com.github.manliogit.timeserie.util.Statistic.sum;
import static java.util.Arrays.asList;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.number.IsCloseTo.closeTo;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

public class SerieTest {

	@Test
	public void detrendAdditiveMovingAverageEvenOrder() {
		List<Double> expectedDetrend = asList(4.875, 13.375, -15.0, -6.0, 7.375, 14.125, -19.125, -4.0, 8.75, 22.875, -25.625, -9.0);
		
		assertThat(new Serie(y(), 4).detrend(), deltaEqual(expectedDetrend, 0.0001));
	}
	
	@Test
	public void detrendMultiplicativeMovingAverageEvenOrder() {
		List<Double> expectedDetrend = asList(1.07,1.19,0.8,0.92,1.09,1.16,0.79,0.96,1.09,1.22,0.76,0.92);
		
		assertThat(new Serie(y(), 4).multiplicative().detrend(), deltaEqual(expectedDetrend, 0.01));
	}
	
	@Test
	public void detrendAdditiveMovingAverageOddOrder() {
		List<Double> expectedDetrend = asList(7.60,14.20,-16.40,-8.80,10.60,14.80,-20.80,-7.20,13.80,24.20,-27.80,-13.80);
		
		assertThat(new Serie(y(), 5).detrend(), deltaEqual(expectedDetrend, 0.0001));
	}
	
	@Test
	public void detrendMultiplicativeMovingAverageOddOrder() {
		List<Double> expectedDetrend = asList(1.1162,1.2034,0.7825,0.8911,1.1352,1.1737,0.7759,0.9281,1.1435,1.2377,0.7421,0.8787);
		
		assertThat(new Serie(y(), 5).multiplicative().detrend(), deltaEqual(expectedDetrend, 0.0001));
	}

	@Test
	public void seasonAdditiveMovingAverageEvenOrder() {
		List<Double> expectedSeasonal = asList(-19.3021,-5.7188,7.6146,17.4062);
		
		List<Double> season = new Serie(y(), 4).season();
		
		assertThat(sum(season), closeTo(0, 0.0001));
		assertThat(season, deltaEqual(expectedSeasonal, 0.0001));
	}
	
	@Test
	public void seasonMultiplicativeMovingAverageEvenOrder() {
		List<Double> expectedSeasonal = asList(0.78,0.93,1.08,1.19);
		
		List<Double> season = new Serie(y(), 4).multiplicative().season();
		
		assertThat(sum(season), is(4.));
		assertThat(season, deltaEqual(expectedSeasonal, 0.01));
	}
	
	@Test
	public void residualMulti() {
		List<Double> expectedResidual = asList(0.9896400024297665, 0.9978912049559723, 1.0200760588178088, 0.989268551319404, 1.006995915959131, 0.9770023754074381, 1.0108977222350162, 1.027513469540515, 1.0033640816111027, 1.0251064196365898, 0.9690262189471752, 0.9832179791400806);
		
		assertThat(new Serie(y(), 4).multiplicative().residual(), deltaEqual(expectedResidual, 0.01));
	}
	
	@Test
	public void anomalyDetectionWithMovingAverageDecomposition() {
		List<Double> a = z();
		List<Double> b = z();
		List<Double> c = z();
		List<Double> d = z();
		
		a.addAll(asList( 50., 61., 73.,-10.));
		b.addAll(asList( 50., 61.,-10., 84.));
		c.addAll(asList( 50.,-10., 73., 84.));
		d.addAll(asList(-10., 61., 73., 84.));
		
		assertThat(new Serie(a, 4).isLastObservationAtypical(), is(true));
		assertThat(new Serie(b, 4).isLastObservationAtypical(), is(true));
		assertThat(new Serie(c, 4).isLastObservationAtypical(), is(true));
		assertThat(new Serie(d, 4).isLastObservationAtypical(), is(true));
	}
	
	@Test
	public void noAnomalyDetectionWithMovingAverageDecomposition() {
		List<Double> z = z();

		z.addAll(asList(50.,61.,73.,84.));
		
		assertThat(new Serie(z, 4).isLastObservationAtypical(), is(false));
	}
	
	@Test
	public void noMoreAnomaliesWithMovingAverageDecomposition() {
		List<Double> z = z();
		
		z.addAll(asList(50.,61.,73.,-10.));
		z.addAll(asList(59.,72.,89.,100.));
		
		assertThat(new Serie(z, 4).isLastObservationAtypical(), is(false));
	}
	
	@Test
	public void anomalyDetectionWithMovingMedianDecomposition() {
		List<Double> a = z();
		List<Double> b = z();
		List<Double> c = z();
		List<Double> d = z();
		
		a.addAll(asList(50.,61.,73.,0.));
		b.addAll(asList(50.,61.,0.,84.));
		c.addAll(asList(50.,0.,73.,84.));
		d.addAll(asList(0.,61.,73.,84.));
		
		assertThat(new Serie(a, 4).smoothWithMedian().isLastObservationAtypical(), is(true));
		assertThat(new Serie(b, 4).smoothWithMedian().isLastObservationAtypical(), is(true));
		assertThat(new Serie(c, 4).smoothWithMedian().isLastObservationAtypical(), is(true));
		assertThat(new Serie(d, 4).smoothWithMedian().isLastObservationAtypical(), is(true));
	}
	
	@Test
	public void noAnomalyDetectionWithMovingMedianDecomposition()  {
		List<Double> z = z();

		z.addAll(asList(50.,61.,73.,84.));
		
		assertThat(new Serie(z, 4).smoothWithMedian().isLastObservationAtypical(), is(false));
	}
	
	@Test
	public void noMoreAnomaliesWithMovingMedianDecomposition() {
		List<Double> z = z();
		
		z.addAll(asList(50.,61.,73.,0.));
		z.addAll(asList(55.,66.,78.,89.));
		
		assertThat(new Serie(z, 4).smoothWithMedian().isLastObservationAtypical(), is(false));
	}
	
	/***
	 * Monthly Airline Passenger Numbers 1949-1960
	 * The classic Box & Jenkins airline data. Monthly totals of international airline passengers, 1949 to 1960. 
	 * 
	 * see
	 * https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html
	 * https://anomaly.io/seasonal-trend-decomposition-in-r/
	 */
	@Test
	public void multiplicativeDecomposition() {
		List<Double> airPassengers = asList(112.,118.,132.,129.,121.,135.,148.,148.,136.,119.,104.,118.,115.,126.,141.,135.,125.,149.,170.,170.,158.,133.,114.,140.,145.,150.,178.,163.,172.,178.,199.,199.,184.,162.,146.,166.,171.,180.,193.,181.,183.,218.,230.,242.,209.,191.,172.,194.,196.,196.,236.,235.,229.,243.,264.,272.,237.,211.,180.,201.,204.,188.,235.,227.,234.,264.,302.,293.,259.,229.,203.,229.,242.,233.,267.,269.,270.,315.,364.,347.,312.,274.,237.,278.,284.,277.,317.,313.,318.,374.,413.,405.,355.,306.,271.,306.,315.,301.,356.,348.,355.,422.,465.,467.,404.,347.,305.,336.,340.,318.,362.,348.,363.,435.,491.,505.,404.,359.,310.,337.,360.,342.,406.,396.,420.,472.,548.,559.,463.,407.,362.,405.,417.,391.,419.,461.,472.,535.,622.,606.,508.,461.,390.,432.);
		
		List<Double> expectedMA = asList(126.7917,127.25,127.9583,128.5833,129.,129.75,131.25,133.0833,134.9167,136.4167,137.4167,138.75,140.9167,143.1667,145.7083,148.4167,151.5417,154.7083,157.125,159.5417,161.8333,164.125,166.6667,169.0833,171.25,173.5833,175.4583,176.8333,178.0417,180.1667,183.125,186.2083,189.0417,191.2917,193.5833,195.8333,198.0417,199.75,202.2083,206.25,210.4167,213.375,215.8333,218.5,220.9167,222.9167,224.0833,224.7083,225.3333,225.3333,224.9583,224.5833,224.4583,225.5417,228.,230.4583,232.25,233.9167,235.625,237.75,240.5,243.9583,247.1667,250.25,253.5,257.125,261.8333,266.6667,271.125,275.2083,278.5,281.9583,285.75,289.3333,293.25,297.1667,301.,305.4583,309.9583,314.4167,318.625,321.75,324.5,327.0833,329.5417,331.8333,334.4583,337.5417,340.5417,344.0833,348.25,353.,357.625,361.375,364.5,367.1667,369.4583,371.2083,372.1667,372.4167,372.75,373.625,375.25,377.9167,379.5,380.,380.7083,380.9583,381.8333,383.6667,386.5,390.3333,394.7083,398.625,402.5417,407.1667,411.875,416.3333,420.5,425.5,430.7083,435.125,437.7083,440.9583,445.8333,450.625,456.3333,461.375,465.2083,469.3333,472.75,475.0417);
		List<Double> expectedDetrend = asList(1.167269,1.163065,1.062846,0.9254699,0.8062016,0.9094412,0.8761905,0.9467752,1.04509,0.9896151,0.9096422,1.073874,1.206387,1.187427,1.084358,0.8961258,0.7522684,0.9049286,0.9228321,0.9401933,1.099897,0.9931455,1.032,1.052735,1.162044,1.146423,1.048682,0.9161169,0.8200328,0.9213691,0.9337884,0.9666592,1.020939,0.9461991,0.9453293,1.113191,1.161372,1.211514,1.033587,0.9260606,0.8174257,0.9091974,0.9081081,0.8970252,1.068276,1.054206,1.021941,1.081402,1.171598,1.207101,1.053528,0.9395176,0.8019306,0.8911879,0.8947368,0.8157657,1.011841,0.9704311,0.9931034,1.11041,1.255717,1.201025,1.047876,0.9150849,0.800789,0.8906174,0.9242521,0.87375,0.9847856,0.9774413,0.9694794,1.117186,1.273841,1.199309,1.063939,0.9220415,0.7873754,0.9101078,0.9162522,0.8809966,0.9949,0.972805,0.9799692,1.143439,1.253256,1.220492,1.061418,0.9065547,0.795791,0.8893194,0.9045226,0.8526912,0.9954561,0.9629886,0.9739369,1.149342,1.258599,1.258054,1.085535,0.9317521,0.8182428,0.8992974,0.9060626,0.8414553,0.9538867,0.9157895,0.9534858,1.141857,1.285901,1.316247,1.045278,0.9197267,0.7853901,0.8454061,0.8943174,0.8399509,0.985736,0.9511609,0.9988109,1.109283,1.272323,1.284688,1.057782,0.9229897,0.8119626,0.8987517,0.9138057,0.8474668,0.9006717,0.9822443,0.9984135,1.126217);
 		List<Double> expectedSeason = asList(0.9086244,0.8820663,1.005589,0.9741842,0.9796465,1.110813,1.224391,1.217759,1.058621,0.9201309,0.7997645,0.8972386);
		List<Double> expectedResidual = asList(0.9533463,0.9550865,1.003991,1.005802,1.008049,1.0136,0.9643044,1.073361,1.039281,1.01584,0.9285412,0.9667463,0.985295,0.9750924,1.024312,0.9739111,0.9406123,1.008571,1.015637,1.065899,1.093784,1.019464,1.053441,0.9477165,0.9490786,0.9414209,0.9906115,0.9956375,1.025343,1.026894,1.027695,1.095903,1.015265,0.9712733,0.9649698,1.002142,0.9485298,0.9948724,0.9763528,1.006444,1.022083,1.013329,0.9994318,1.016959,1.062339,1.082142,1.043173,0.9735233,0.9568816,0.9912478,0.9951896,1.021069,1.002708,0.9932563,0.9847158,0.9248349,1.006217,0.9961474,1.013736,0.9996377,1.025585,0.9862585,0.9898501,0.994516,1.001281,0.9926205,1.017199,0.9905718,0.9793123,1.003343,0.9896216,1.005738,1.040387,0.9848493,1.005023,1.002076,0.984509,1.014343,1.008395,0.9987872,0.9893704,0.9985842,1.000329,1.029372,1.023574,1.002245,1.002642,0.9852454,0.9950316,0.9911739,0.9954857,0.9666974,0.9899235,0.9885077,0.9941717,1.034686,1.027939,1.033089,1.025424,1.01263,1.023105,1.002295,0.9971806,0.9539593,0.9485851,0.9400578,0.9732958,1.027948,1.050237,1.080877,0.9873961,0.9995607,0.9820266,0.9422311,0.9842542,0.9522537,0.9802574,0.9763666,1.019563,0.9986232,1.039147,1.054961,0.9992076,1.003107,1.015252,1.001686,1.005702,0.9607745,0.8956659,1.008274,1.019157,1.013868);
 		
		Serie serie = new Serie(airPassengers, 12).multiplicative();
		assertThat(serie.trend(), deltaEqual(expectedMA, 0.0001));
		assertThat(serie.detrend(), deltaEqual(expectedDetrend, 0.0001));
		assertThat(sum(serie.season()), closeTo(12., 0.0001));
		assertThat(serie.season(), deltaEqual(expectedSeason, 0.01));
		assertThat(serie.residual(), deltaEqual(expectedResidual, 0.01));
	}
	
	/***
	 *  Total quarterly beer production in Australia (in megalitres) from 1956:Q1 to 2008:Q3. 
	 * 
	 *  see
	 *  https://www.rdocumentation.org/packages/fpp/versions/0.5/topics/ausbeer
	 *  https://anomaly.io/seasonal-trend-decomposition-in-r/
	 */
	@Test
	public void additiveDecomposition() {
		List<Double> ausBeer = asList(236.,320.,272.,233.,237.,313.,261.,227.,250.,314.,286.,227.,260.,311.,295.,233.,257.,339.,279.,250.,270.,346.,294.,255.,278.,363.,313.,273.,300.,370.,331.,288.,306.,386.,335.,288.,308.,402.,353.,316.,325.,405.,393.,319.,327.,442.,383.,332.,361.,446.,387.,357.,374.,466.,410.,370.,379.,487.,419.,378.,393.,506.,458.,387.);
		
		List<Double> expectedMA = asList(265.375,264.625,262.375,260.25,261.125,262.875,266.125,269.25,270.5,271.375,272.125,274.,274.375,277.5,279.,279.125,282.875,285.375,288.125,290.625,292.25,295.375,299.875,304.5,309.5,313.125,316.25,320.375,323.,325.75,328.25,328.75,329.,331.25,335.5,341.25,346.875,349.375,354.75,360.125,360.75,365.625,369.,369.375,375.25,380.,381.,384.625,389.375,393.5,398.875,403.375,405.625,408.875,412.625,414.75,417.5,421.625,428.875,434.875);
		List<Double> expectedDetrend = asList(6.625,-31.625,-25.375,52.75,-0.125,-35.875,-16.125,44.75,15.5,-44.375,-12.125,37.,20.625,-44.5,-22.,59.875,-3.875,-35.375,-18.125,55.375,1.75,-40.375,-21.875,58.5,3.5,-40.125,-16.25,49.625,8.,-37.75,-22.25,57.25,6.,-43.25,-27.5,60.75,6.125,-33.375,-29.75,44.875,32.25,-46.625,-42.,72.625,7.75,-48.,-20.,61.375,-2.375,-36.5,-24.875,62.625,4.375,-38.875,-33.625,72.25,1.5,-43.625,-35.875,71.125);
		List<Double> expectedSeason = asList(-24.51667, 57.38333, 7.17500, -40.01667);
		List<Double> expectedResidual = asList(-0.55,8.391667,-0.8583333,-4.633333,-7.3,4.141667,8.391667,-12.63333,8.325,-4.358333,12.39167,-20.38333,13.45,-4.483333,2.516667,2.491667,-11.05,4.641667,6.391667,-2.008333,-5.425,-0.3583333,2.641667,1.116667,-3.675,-0.1083333,8.266667,-7.758333,0.825,2.266667,2.266667,-0.1333333,-1.175,-3.233333,-2.983333,3.366667,-1.05,6.641667,-5.233333,-12.50833,25.075,-6.608333,-17.48333,15.24167,0.575,-7.983333,4.516667,3.991667,-9.55,3.516667,-0.3583333,5.241667,-2.8,1.141667,-9.108333,14.86667,-5.675,-3.608333,-11.35833,13.74167);
		
		Serie serie = new Serie(ausBeer, 4);

		assertThat(serie.trend(), deltaEqual(expectedMA, 0.0001));
		assertThat(serie.detrend(), deltaEqual(expectedDetrend, 0.0001));
		assertThat(sum(serie.season()), closeTo(0., 0.0001));
		assertThat(serie.season(), deltaEqual(expectedSeason, 0.01));
		assertThat(serie.residual(), deltaEqual(expectedResidual, 0.01));
	}
	
	/***
	 *  see
	 *  https://anomaly.io/anomaly-detection-moving-median-decomposition/
	 */
	@Test 
	public void multiplicativeDecompositionWithMovingAverageOddOrder() {
		List<Double> expectedMA = asList(28.7143,31.0000,30.2857,29.7143,29.4286,31.2857,31.1429,32.5714,32.2857,36.1429,36.1429,35.0000,34.0000,33.0000,31.5714,31.5714,29.1429,30.8571,32.5714,34.1429,38.7143,38.8571,38.2857,40.2857,45.7400,44.7400,43.5972,39.5972,39.1686,35.4543,33.5972,26.7143,29.1429,28.4286,28.5714,28.8571,28.8571,32.9439,33.8011,32.0868,33.3725,34.6582,36.9439,40.8011,38.2857,40.0000,40.0000,40.5714,39.5714,39.1429,39.5714,40.1429,38.2857,42.8385,42.1242,42.5528,46.2670,45.8385,46.2670,46.4099,41.8571,42.4286,43.0000,39.8571,40.7143,40.2857,41.1429,48.1023,48.5309,48.2452,48.8166,48.6737,46.1023,45.2452,37.5714,35.4286,34.2857,33.4286,31.5714,34.7143,37.0000,38.0000,39.2857,41.8571,43.4286,45.7143,45.5714,45.8571,47.2857,48.5714,47.0000,46.0000,46.5714,46.1429,46.4286,46.1429,51.8829,54.1686,54.5972,54.8829,53.7400,51.0257,49.1686,43.1429,41.7143,43.1429,41.4286,42.8571,56.9084,57.9084,56.3370,57.7656,56.6227,58.4799,58.9084,49.8571,51.0000,51.7143,51.8571,54.4286,51.2857,51.0000,48.4286,47.4286,47.8571,47.5714,47.4286,51.4286,55.8571,57.4286,58.4286,61.5714,65.8571,68.1429,88.1097,90.1097,91.2525,93.8239,95.2525,97.6811,95.8239,81.2857,83.7143,82.0000,81.1429,79.2857,74.2857,97.5972,97.1686,95.3115,97.0258,98.3115,97.7400,99.4543,74.7143,72.4286,66.8571,66.2857,76.6645,76.6645,76.6645,78.0930,78.0930,78.9502,79.9502,68.2857,68.5714,67.2857,69.1429,69.5714,69.2857,69.8571,69.8571,71.7143,72.7143,95.0246,96.0246,97.5960,95.7389,95.3103,91.8817,93.0246,73.0000,72.1429,72.2857,71.7143,71.8571,73.4286,88.5809,84.2952,84.8666,86.8666,89.1523,97.3108,94.5965,96.2559,100.1130,100.6845,101.1130,101.2559,92.9546,97.0974,80.1429,80.8571,83.5714,80.2857,80.8571,81.2857,79.4286,80.0000,78.8571,73.8571,74.5714,75.1429,75.1429,75.0000,72.8571,72.1429,75.1429,77.2857,75.0000,75.2857,74.2857,75.8571,75.2857,76.0000,75.7143,76.5714,76.1429,76.8571,77.2857,78.8571,78.2857,76.2857,78.7143,78.8571,78.0000,78.1429,74.4286,105.5548,106.9833,105.9833,107.6976,108.9833,108.6976,112.4119,79.1429,78.0000,79.1429,76.8571,84.1930,81.3358,81.9072,84.3358,88.3358,83.9072,84.6051,77.6978,79.9835,76.4121,73.9835,69.4121,70.5550,69.4286,70.8571,71.7143,72.5714,73.1429,74.2857,75.0000,79.5714,78.4286,76.2857,75.8571,74.2857,73.5714,70.8571,64.8571,64.2857,62.0000,60.4286,62.1429,62.5714,63.4286,64.2857,62.8571,64.7143,66.5714,62.7143,63.7143,65.4286,66.1429,74.0336,73.8907,73.7479,76.6050,88.1103,87.1103,86.5388,78.2195,78.3624,77.2195,75.6481,62.8571,63.1429,64.1429,65.7143,66.5714,67.2857,66.0000,63.8571,62.8571,61.7143,61.1429,61.1429,61.0000,62.2857,64.5714,65.1429,64.7143,66.2857,64.5714,62.7143,62.4286,60.2857,58.4286,70.5592,69.8450,72.9878,75.4164,73.9878,87.9769,87.1197,74.9890,75.1319,70.2748,69.9890,71.9890,58.1429,60.7143,61.8571,61.2857,65.2857,63.8571,80.5971,81.5971,80.8828,80.3114,81.8828,81.3114,81.4543,66.8571,66.5714,66.2857,67.0000,66.8571,67.4286,71.2857,71.8571,74.4286,78.2857,80.5714,80.7143,103.3105,101.3105,100.0247,98.7390,93.8819,94.8819,93.0247,69.1429,68.1429,78.5898,78.8755,82.1612,79.5898,79.7327,82.5898,93.4959,81.7632,85.0489,86.1918,86.3346,85.7632,83.9060,71.4286,71.4286,66.8571,62.4286,59.1429,58.8571,54.7143,52.5714,48.5714,43.4286,41.7143,41.8571,41.2857,42.2857,42.7143,51.1025,50.6739,53.6739,55.8168,57.6739,59.5311,59.9596,54.0000,60.2857,60.1429,60.0000,58.1429,56.8571,57.5714,57.2857,58.8571,61.0000,61.4286,63.8571,66.7143,71.7143,72.5714,84.3365,83.6222,90.9580,91.5294,91.1009,88.2437,91.8152,78.7644,80.9072,73.1429,71.2857,69.8571,69.5714,66.0000,63.4286,60.0000,60.4286,59.8571,57.8571,59.0000,61.1429,63.8571,63.0000,61.7143,62.5714,69.4286,65.2857,65.0000,63.4286,67.1429,67.1429,68.5714,84.3523,111.3769,112.6626,115.2341,114.5198,117.0912,115.2341,95.7389,71.4286,70.2857,68.8571,68.4286,65.7143,67.5714,64.5714,80.0807,79.9378,80.7949,79.2235,80.0807,79.5092,80.5092,65.7143,65.0000,65.7143,67.0000,66.5714,64.7143,66.7143,67.7143,69.4286,87.3616,95.4977,96.0692,96.7835,95.6406,94.9263,94.0692,75.4218,66.4286,67.4286,70.1429,70.5714,69.4286,69.5714,69.1429,70.1429,70.0000,66.7143,67.7143,71.1429,70.4286,69.2857,70.2857,70.1429,72.1429,72.1429,70.7143,73.1429,74.4286,75.7143,73.5714,73.0000,73.1429,75.0000,72.7143,71.1429,64.4286,65.5714,65.8571,67.0000,67.4286,69.0000,75.4286,85.2857,89.0000,90.5714,92.0000,113.0269,113.7412,110.5984,109.0269,116.3491,116.7777,111.9205,93.0364,94.6078,94.7507,117.3549,107.1756,105.3185,110.0327,109.7470,110.1756,96.8899,74.4286,73.8571,72.8571,74.0000,71.7143,71.5714,86.1429,89.7143,92.4286,93.8571,92.4286,93.4286,91.5714,91.2857,87.1429,85.0000,84.2857,81.8571,80.1429,82.8571,85.8571,88.4286,95.2553,94.6839,99.1124,98.5410,96.6839,93.5410,90.5410,83.1429,83.8571,81.0000,115.6614,114.8042,116.2328,114.5185,113.8042,113.2328,116.3757,86.7143,93.0000,95.5714,97.8571,98.8571,97.7143,165.8785,160.8785,153.7357,151.3071,168.2308,168.2308,169.3737,98.3523,99.4952,100.3523,99.0666,80.0000,81.0000,80.7143,82.7143,82.5714,80.1429,82.4286,85.4286,84.7143,83.8571,83.4286,86.4286,89.5714,86.7143,83.7143,83.2857,84.8571,83.5714,86.0000,90.7143,92.0000,92.2857,93.5714,94.0000,95.5714,94.8571,89.7143,88.4286,92.0000,93.7143,99.9696,99.5410,96.8267,98.6839,100.1124,98.1124,96.1124,90.2857,93.2857,96.5714,100.1429,105.4286,105.7143,107.0000,108.2857,104.8571,104.2857,102.4286,96.5714,112.6576,110.8005,108.8005,109.0862,109.0862,107.5148,110.6576,96.5714,105.9951,107.5665,109.5665,107.5665,148.0765,148.3622,148.0765,139.9386,137.2243,133.3672,130.6529,89.4286,86.2857,81.2857,79.0000,78.0000,81.4286,83.5714,82.8571,84.4286,88.8571,91.8571,97.1429,98.0000,98.8571,102.2857,105.4286,106.8571,110.2857,109.7143,111.5714,115.5714,113.8571,111.2857,112.2857,108.7143,108.5714,108.1429,106.0000,111.2857,114.2857,119.4286,120.7143,120.8571,126.8571,131.5714,134.4286,137.1429,134.2857,133.7143,130.0000,144.4905,140.4905);
		List<Double> expectedDetrend = asList(0.8706,0.4516,1.3538,1.0769,1.6311,0.7032,0.8349,0.7061,0.8363,1.1067,1.1621,1.3143,1.4412,0.7879,0.4751,0.6335,1.1324,1.0370,1.4123,0.9372,0.9815,0.6949,0.8097,1.6135,0.7215,0.9388,1.0551,1.9239,0.5106,0.6487,1.1013,1.1230,0.5490,1.1608,0.9800,1.2822,0.6238,1.1535,0.9467,0.4986,1.8461,0.9810,0.6767,0.6617,1.2276,1.2000,1.0750,1.0845,1.1625,0.6387,0.7834,0.9964,1.1754,1.0738,1.1395,0.7755,1.2292,0.5672,0.9294,1.5298,1.0273,1.2020,0.7907,0.6272,0.7368,1.1667,1.1910,1.0187,0.9891,0.8291,1.5101,0.6780,0.9761,1.1714,1.2776,0.8468,0.9917,0.5983,0.5701,1.0658,1.2703,0.9211,1.3236,1.1945,0.6217,0.5906,1.2069,1.2648,1.0785,1.0500,1.1064,0.8043,0.7730,0.9536,1.0985,1.1920,0.9252,0.9969,0.6411,1.3881,1.1165,1.0583,1.1593,0.9272,0.8390,0.5099,0.8207,1.1667,1.1246,0.7771,0.8875,2.3086,0.5122,0.3933,1.0185,1.1232,1.1373,1.0249,1.3499,0.6798,0.5460,1.1961,1.5280,0.7590,1.0657,1.0931,0.6325,0.6028,1.0563,1.2711,1.0954,1.3318,0.9566,0.5430,0.6015,0.9877,0.9753,2.1718,1.0078,0.7269,0.5740,0.7750,1.2662,0.9268,1.2570,1.4252,0.7942,0.5021,0.5146,0.7449,2.4651,1.0070,1.0231,0.7139,0.7763,0.6351,1.2415,0.9957,1.0826,0.7957,0.8739,1.6730,0.5890,1.0513,0.9506,1.2155,0.9771,1.0998,0.7087,0.6899,1.0680,1.2740,1.2311,0.9064,1.0727,0.5157,0.6353,0.8300,2.5608,0.9758,0.8272,0.6987,0.6301,0.5129,1.2312,1.4641,1.2107,1.0486,0.6886,0.5576,0.5656,2.2456,0.8413,0.9351,0.9620,0.8000,1.0399,0.2880,2.0441,1.0073,1.0220,0.9681,0.9733,0.5689,0.6940,1.0961,1.3233,1.4025,0.8939,1.0250,0.6214,0.6093,1.2337,1.3175,1.0513,1.0133,1.1804,0.6792,0.5856,0.9963,1.2533,1.3283,1.2250,0.9228,0.6774,0.4868,1.1623,1.1754,1.3790,1.1580,0.9834,0.6087,0.5365,1.1929,1.2831,1.2808,0.9615,1.1901,0.6583,0.3411,0.8599,0.7077,2.9609,0.7799,0.7912,0.5426,0.5686,1.1538,1.2762,1.1190,0.9146,1.1557,0.5494,1.1425,0.7924,1.2514,1.2174,1.3514,0.7877,0.6528,0.6488,1.2390,1.1339,1.2387,1.0302,0.9900,0.5787,0.7930,1.2385,1.1467,1.1311,1.0328,0.9963,0.9755,0.6731,1.0466,1.1714,1.2181,1.1822,0.9194,0.5296,0.7402,0.9749,1.1351,1.4156,1.2568,0.9735,0.5708,0.5740,1.1614,1.2991,0.9676,1.1616,1.0150,0.5831,1.1910,0.8285,0.9643,0.9707,2.1291,0.8678,0.5051,0.4362,1.1773,1.2036,1.1381,1.1717,1.0515,0.6837,0.6667,1.2528,1.2886,1.0370,1.0140,1.0304,0.6230,0.6422,1.2389,1.2281,1.1280,1.1767,1.0376,0.5581,0.8169,1.1280,1.1467,1.0062,0.9020,0.7398,1.5900,0.6217,1.0230,0.9642,0.8135,2.1419,0.6830,0.5001,0.6529,0.9631,1.3506,1.2125,1.0443,1.0109,0.6734,0.5335,1.0294,0.8902,2.3929,0.8671,0.7502,0.4788,0.8077,1.2017,1.1013,1.3433,1.0321,0.8750,0.6172,0.7376,1.1286,1.2774,1.1667,1.0779,0.8324,0.5922,0.5399,2.4527,0.9160,0.8959,0.8385,0.7521,0.9832,0.5217,0.9509,0.9615,1.9868,1.0034,0.9081,0.5241,0.5137,1.1170,1.8023,0.8803,1.2010,0.9892,0.7000,0.5320,1.2265,1.0892,1.2850,1.2063,0.9504,0.5136,0.7412,1.2204,1.2705,1.1468,0.8478,0.9459,0.6555,0.6262,1.1840,1.0433,1.9119,0.5548,1.0247,0.7171,0.8333,1.2109,0.9810,1.0833,1.3071,1.0553,0.7295,0.5586,1.0874,1.0492,1.0256,1.3624,1.1242,0.6275,0.6752,0.9960,1.1839,0.7586,1.8503,0.7684,1.0919,0.5772,1.0284,0.9764,1.2852,1.0942,1.2168,0.6037,0.6061,1.1194,1.2833,1.1418,1.0024,1.0543,0.7627,0.5888,0.8926,1.3492,1.3611,1.2626,0.7922,0.5514,0.6462,1.6554,0.8340,1.2213,0.9917,0.9603,0.3232,0.4616,1.8698,2.1409,0.7772,0.7463,0.7938,0.7560,0.5549,1.1473,1.0960,1.2630,1.1247,1.1305,0.4371,0.6505,0.7179,2.3170,1.0240,1.0313,0.7701,0.6239,0.7385,0.9891,1.1940,1.1567,1.3444,1.0642,0.5612,0.5041,0.9043,0.9110,0.9264,2.1959,1.3379,0.4424,0.4252,0.9414,1.2344,1.2309,1.1690,0.9211,0.7058,0.8480,1.0702,1.0550,1.2000,1.1842,1.0633,0.6747,0.5112,1.1691,1.3943,1.1263,0.9842,1.0950,0.6646,0.6836,1.0883,1.1623,1.3049,1.0959,1.2031,0.4267,0.6326,1.1526,1.5676,1.2200,1.0477,0.6119,0.5932,0.6957,1.1932,1.2194,1.0225,1.2587,1.1957,0.5839,0.5187,0.9042,2.3039,0.8251,0.7878,0.8846,1.2603,0.6553,0.6966,1.0140,0.9984,0.8830,2.3378,0.4191,0.4447,1.0218,1.5720,1.4894,0.0000,1.3514,0.5857,0.5868,1.2421,1.1258,1.1793,1.0868,1.3524,0.6529,0.5679,1.0626,1.2393,1.1294,1.1864,1.1728,0.5740,0.5672,0.9318,1.0856,1.2073,1.2779,1.1502,0.9518,0.4447,1.1866,1.0161,1.2268,1.1806,1.1481,0.3631,0.4181,0.7829,2.9221,0.8436,0.9626,0.6960,0.4267,0.4731,1.1824,1.2978,1.4162,1.2997,0.5848,0.2735,0.2342,3.9003,0.5469,0.5350,0.6495,2.1908,0.4422,0.4385,0.9388,1.2500,1.1852,1.2513,0.9914,0.6176,0.5241,1.2981,1.1589,0.9325,1.3952,1.2346,0.5322,0.4019,1.1993,1.4334,1.2127,1.1431,0.9812,0.5000,0.5181,1.0326,1.4845,1.4321,1.1277,0.8789,0.5482,0.5573,1.1987,1.4348,1.0457,0.9703,1.0950,0.6610,0.9504,1.0288,1.1517,1.1549,1.1851,1.0184,0.5178,0.5292,1.1762,1.2865,1.2710,1.3298,0.9251,0.5658,0.6053,1.0355,1.1717,1.1101,0.9467,1.9214,0.4217,0.4465,0.9218,1.3669,1.0567,1.1621,1.0131,1.0409,0.3984,0.7819,0.7969,2.8267,0.9255,0.8173,0.4210,0.4473,1.0315,1.2179,1.3544,1.3462,0.9088,0.4667,0.3983,1.3384,1.2830,1.1104,1.1941,1.0714,0.6069,0.6844,1.1287,1.1230,1.1425,1.2578,1.0307,0.7268,0.5797,1.1861,1.3181,1.0486,1.1053,1.1281,0.5566,0.5841,1.1288,1.1136,1.2509,1.1667,1.2455,0.5168,0.4910,1.2469,1.2362,1.2788,1.2308,0.9551,0.4555);
		List<Double> expectedSeason = asList(1.1909401, 1.1095045, 1.0290131, 0.6575217, 0.6133319, 1.1602757, 1.2394130);
		List<Double> expectedResidual = asList(1.324134,0.736327,1.166769,0.868898,1.369563,0.633793,0.811323,1.073942,1.363508,0.953842,0.937585,1.103570,1.298937,0.765664,0.722582,1.032857,0.975934,0.836716,1.185854,0.844736,0.953875,1.056776,1.320169,1.390596,0.582105,0.788248,0.950978,1.869636,0.776572,1.057702,0.949156,0.906070,0.460997,1.046236,0.952369,1.950016,1.017006,0.994138,0.763842,0.418701,1.663858,0.953348,1.029169,1.078938,1.058035,0.968200,0.902648,0.977470,1.129679,0.971354,1.277275,0.858797,0.948330,0.901642,1.027024,0.753642,1.869373,0.924800,0.801006,1.234331,0.862599,1.083385,0.768404,0.953946,1.201376,1.005508,0.960916,0.855343,0.891444,0.805722,2.296600,1.105411,0.841257,0.945121,1.072738,0.763200,0.963707,0.909918,0.929571,0.918612,1.024897,0.773383,1.192998,1.160859,0.945536,0.962978,1.040181,1.020481,0.905629,0.946368,1.075188,1.223302,1.260339,0.821839,0.886276,1.000848,0.833850,0.968780,0.974962,2.263131,0.962259,0.853863,0.973413,0.835645,0.815384,0.775539,1.338084,1.005508,0.907376,0.652500,0.799921,2.243532,0.778928,0.641248,0.877834,0.906243,0.954922,0.923711,1.311803,1.033867,0.890156,1.030857,1.232861,0.637342,0.960493,1.062273,0.961991,0.982792,0.910358,1.025602,0.919739,1.200344,0.929644,0.825793,0.980747,0.851251,0.786917,1.823608,0.908376,0.706361,0.872928,1.263662,1.091302,0.747797,1.055504,1.284560,0.771837,0.763570,0.838974,0.642025,1.988943,0.845553,0.922143,0.693767,1.180631,1.035505,1.069964,0.803356,0.909063,0.717144,0.849297,2.544434,0.960395,0.906074,0.766969,1.020606,0.880648,1.068779,1.077801,1.124902,0.920506,1.027929,1.033708,0.816918,1.042447,0.784242,1.035742,0.715306,2.066174,0.819319,0.745513,0.679039,0.958352,0.836205,1.061149,1.181320,1.016622,0.945141,0.669220,0.847979,0.922166,1.935388,0.678754,0.785218,0.867036,0.777396,1.581571,0.469613,1.761709,0.812763,0.858149,0.872552,0.945821,0.865226,1.131552,0.944677,1.067700,1.177608,0.805661,0.996100,0.945029,0.993401,1.063296,1.062996,0.882774,0.913321,1.147111,1.032982,0.954706,0.858678,1.011231,1.115315,1.104097,0.896769,1.030262,0.793766,1.001714,0.948330,1.157898,1.043702,0.955638,0.925742,0.874724,1.028104,1.035266,1.075450,0.866638,1.156572,1.001259,0.556070,0.741158,0.570963,2.486198,0.702959,0.768878,0.825292,0.927054,0.994459,1.029659,0.939560,0.824301,1.123117,0.835565,1.862719,0.682967,1.009657,1.022235,1.218011,0.765454,0.992878,1.057817,1.067830,0.914842,1.040089,0.928560,0.962126,0.880184,1.292887,1.067386,0.925169,0.949720,0.930854,0.968165,1.483628,1.097411,0.902029,0.945101,1.022773,1.065541,0.893434,0.805374,1.206899,0.840219,0.915865,1.188603,1.132774,0.946062,0.868132,0.935924,1.000999,1.048179,0.812470,1.046985,0.986394,0.886766,1.941821,0.714061,0.778026,0.815039,1.918959,0.843297,0.768117,0.711247,1.014649,0.971121,0.955619,1.056092,1.021855,1.039740,1.086959,1.079740,1.039715,0.870772,0.913938,1.001322,0.947422,1.047071,1.067796,0.990848,0.947181,1.060585,1.008355,0.848773,1.331960,0.972150,0.925195,0.844918,0.812974,0.718989,2.418224,1.013683,0.881684,0.777941,0.683034,1.930481,0.663775,0.760550,1.064476,0.830100,1.089700,1.018079,0.941221,0.982437,1.024115,0.869868,0.887244,0.718224,2.009281,0.781513,0.729050,0.728183,1.316893,1.035717,0.888560,1.127919,0.930191,0.850329,0.938729,1.202570,0.972699,1.030627,0.979618,0.971493,0.808972,0.900714,0.880219,2.113859,0.739096,0.752221,0.755731,0.730862,1.495355,0.850593,0.819517,0.775790,1.668258,0.904325,0.882498,0.797065,0.837521,0.962706,1.454146,0.739160,1.082449,0.961311,1.064604,0.867393,1.057073,0.878839,1.079000,1.087252,0.923595,0.781095,1.208443,1.051814,1.025121,0.962901,0.764081,0.919275,0.996953,1.020969,1.020483,0.841800,1.605390,0.500082,0.995784,1.090685,1.358699,1.043632,0.791502,0.909646,1.178116,1.025523,1.109512,0.910769,0.937173,0.846514,0.861153,1.227950,1.092500,0.954326,1.100867,0.858425,0.955207,0.636969,1.667666,0.746715,1.660584,0.941165,0.886327,0.787814,1.079111,0.986196,1.182462,0.918139,0.988145,0.964744,1.035436,0.958775,0.903454,1.024594,1.159980,0.959978,0.769315,1.088585,1.142888,1.137947,0.769845,0.838637,1.053514,1.426735,0.672934,1.025473,0.893792,0.933184,0.491583,0.752537,1.611525,1.727328,0.652570,0.672649,0.771444,1.149772,0.904695,0.988819,0.884317,1.060543,1.013728,1.098656,0.664707,1.060610,0.618704,1.869471,0.859798,0.929538,0.748385,0.948886,1.204016,0.852496,0.963383,0.971210,1.211686,1.034234,0.853480,0.821929,0.779373,0.735039,0.777886,1.979215,1.300129,0.672903,0.693294,0.811335,0.995962,1.033580,1.053662,0.895083,1.073366,1.382692,0.922408,0.851201,1.007607,1.067282,1.033312,1.026124,0.833409,1.007581,1.124975,0.945701,0.887025,1.064175,1.010836,1.114558,0.937960,0.937754,1.095651,0.987730,1.169203,0.648901,1.031437,0.993394,1.264814,1.024437,0.944316,0.594687,0.902206,1.134218,1.028361,0.983877,0.858542,1.134448,1.161941,0.888079,0.845743,0.779274,1.858874,0.692817,0.710067,0.859616,1.916761,1.068486,0.600344,0.818144,0.838297,0.795883,2.271838,0.637463,0.725129,0.880634,1.268324,1.250577,0.000000,1.313250,0.890704,0.956784,1.070541,0.908330,0.990217,0.979499,1.314265,0.992979,0.925865,0.915815,0.999945,0.948336,1.069343,1.139708,0.872937,0.924852,0.803068,0.875916,1.013722,1.151809,1.117779,1.447491,0.725135,1.022727,0.819835,1.030114,1.064060,1.115776,0.552269,0.681691,0.674763,2.357614,0.708309,0.867611,0.676397,0.648935,0.771390,1.019035,1.047117,1.189132,1.171431,0.568278,0.415953,0.381797,3.361566,0.441231,0.449207,0.585353,2.128990,0.672575,0.714874,0.809086,1.008542,0.995168,1.127826,0.963413,0.939356,0.854454,1.118780,0.935009,0.783034,1.257525,1.199780,0.809451,0.655296,1.033669,1.156553,1.018265,1.030278,0.953532,0.760431,0.844747,0.889968,1.197761,1.202463,1.016363,0.854142,0.833726,0.908684,1.033123,1.157631,0.878072,0.874530,1.064152,1.005251,1.549535,0.886723,0.929262,0.969736,1.068158,0.989664,0.787429,0.862900,1.013683,1.037980,1.067248,1.198567,0.898986,0.860433,0.986904,0.892463,0.945360,0.932124,0.853252,1.867271,0.641325,0.727910,0.794434,1.102832,0.887243,1.047379,0.984519,1.583059,0.649636,0.673866,0.642954,2.373537,0.834149,0.794249,0.640226,0.729270,0.888976,0.982664,1.137278,1.213293,0.883149,0.709736,0.649364,1.153527,1.035134,0.932389,1.076262,1.041220,0.923067,1.115803,0.972809,0.906070,0.959315,1.133671,1.001668,1.105398,0.945123,1.022288,1.063460,0.880498,0.996177,1.096329,0.846518,0.952310,0.972829,0.898519,1.050336,1.051520,1.210379,0.786027,0.800492,1.074637,0.997384,1.073812,1.109296,0.928152,0.692824);
		
		Serie serie = new Serie(webTraffic(), 7)
						.multiplicative();
		
		assertThat(serie.trend(),    deltaEqual(expectedMA, 0.0001));
		assertThat(serie.detrend(),  deltaEqual(expectedDetrend, 0.0001));
		assertThat(serie.season(),   deltaEqual(expectedSeason, 0.01));
		assertThat(serie.residual(), deltaEqual(expectedResidual, 0.1));
	}

	/***
	 *  see
	 *  https://anomaly.io/anomaly-detection-moving-median-decomposition/
	 *  in the article season adjustment is not performed
	 */
	@Test
	public void multiplicativeDecompositionWithMovingMedianOddOrder() {
		List<Double> expectedMM = asList(30.0000,30.0000,30.0000,26.0000,26.0000,27.0000,27.0000,27.0000,27.0000,40.0000,40.0000,40.0000,40.0000,33.0000,32.0000,32.0000,32.0000,32.0000,32.0000,32.0000,32.0000,33.0000,33.0000,38.0000,42.0000,42.0000,42.0000,37.0000,37.0000,30.0000,30.0000,28.0000,30.0000,30.0000,30.0000,32.0000,32.0000,32.0000,34.0000,32.0000,32.0000,32.0000,34.0000,43.0000,43.0000,44.0000,44.0000,44.0000,43.0000,43.0000,44.0000,45.0000,40.0000,45.0000,45.0000,45.0000,46.0000,43.0000,43.0000,43.0000,43.0000,43.0000,43.0000,43.0000,47.0000,47.0000,47.0000,48.0000,48.0000,48.0000,48.0000,48.0000,45.0000,45.0000,34.0000,34.0000,34.0000,34.0000,34.0000,35.0000,37.0000,37.0000,37.0000,47.0000,50.0000,51.0000,51.0000,51.0000,51.0000,51.0000,51.0000,51.0000,51.0000,48.0000,48.0000,48.0000,51.0000,54.0000,54.0000,54.0000,54.0000,54.0000,54.0000,40.0000,40.0000,40.0000,40.0000,45.0000,50.0000,50.0000,50.0000,50.0000,50.0000,56.0000,56.0000,56.0000,56.0000,56.0000,56.0000,58.0000,53.0000,51.0000,51.0000,51.0000,51.0000,51.0000,51.0000,52.0000,59.0000,63.0000,63.0000,63.0000,64.0000,64.0000,82.0000,89.0000,89.0000,89.0000,89.0000,89.0000,76.0000,76.0000,76.0000,76.0000,76.0000,76.0000,71.0000,71.0000,71.0000,71.0000,71.0000,71.0000,71.0000,83.0000,71.0000,71.0000,66.0000,66.0000,67.0000,67.0000,67.0000,76.0000,76.0000,76.0000,76.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,78.0000,78.0000,78.0000,78.0000,76.0000,76.0000,76.0000,76.0000,76.0000,76.0000,77.0000,77.0000,77.0000,77.0000,77.0000,75.0000,75.0000,75.0000,77.0000,91.0000,91.0000,91.0000,91.0000,95.0000,95.0000,95.0000,94.0000,94.0000,88.0000,88.0000,88.0000,78.0000,82.0000,82.0000,82.0000,82.0000,82.0000,79.0000,79.0000,79.0000,79.0000,79.0000,77.0000,77.0000,77.0000,86.0000,77.0000,77.0000,77.0000,88.0000,88.0000,88.0000,88.0000,88.0000,88.0000,88.0000,89.0000,89.0000,89.0000,76.0000,91.0000,91.0000,91.0000,92.0000,75.0000,75.0000,85.0000,85.0000,85.0000,85.0000,85.0000,86.0000,86.0000,86.0000,86.0000,86.0000,90.0000,86.0000,86.0000,94.0000,96.3507,96.3507,96.3507,70.0000,86.0000,80.0000,80.0000,73.0000,73.0000,73.0000,73.0000,73.0000,73.0000,73.0000,81.0000,81.0000,81.0000,81.0000,77.0000,77.0000,77.0000,76.0000,76.0000,76.0000,76.0000,61.0000,61.0000,61.0000,61.0000,63.0000,63.0000,63.0000,72.0000,74.0000,64.0000,64.0000,74.0000,74.0000,75.0000,75.0000,75.0000,84.0000,84.0000,84.0000,84.0000,73.0000,74.0000,74.0000,73.0000,73.0000,73.0000,73.0000,73.0000,73.0000,73.0000,70.0000,64.0000,63.0000,63.0000,63.0000,63.0000,63.0000,63.0000,73.0000,73.0000,73.0000,73.0000,68.0000,67.0000,67.0000,67.0000,63.0000,67.0000,67.0000,67.0000,71.0000,63.0000,84.0000,84.0000,61.0000,61.0000,56.0000,56.0000,56.0000,56.0000,64.0000,64.0000,64.0000,66.0000,66.0000,66.0000,71.0000,71.0000,71.0000,71.0000,71.0000,71.0000,71.0000,69.0000,69.0000,69.0000,69.0000,69.0000,69.0000,69.0000,84.0000,86.0000,86.0000,86.0000,87.0000,86.0000,86.0000,85.0000,78.0000,78.0000,78.0000,75.0000,75.0000,75.0000,75.0000,75.0000,75.0000,75.0000,79.0000,80.0000,76.0000,76.0000,83.0000,83.0000,83.0000,82.0000,76.0000,76.0000,71.0000,68.0000,68.0000,68.0000,53.0000,53.0000,52.0000,48.0000,40.0000,40.0000,40.0000,40.0000,40.0000,40.0000,40.0000,56.0000,56.0000,56.0000,56.0000,59.0000,59.0000,61.0000,60.0000,60.0000,60.0000,60.0000,64.0000,63.0000,63.0000,64.0000,64.0000,64.0000,64.0000,75.0000,75.0000,75.0000,70.0000,84.0000,84.0000,81.0000,79.0000,81.0000,79.0000,81.0000,79.0000,79.0000,78.0000,77.0000,71.0000,69.0000,61.0000,61.0000,61.0000,60.0000,60.0000,60.0000,61.0000,57.0000,57.0000,57.0000,79.0000,56.0000,56.0000,56.0000,68.0000,68.0000,68.0000,68.0000,81.0000,81.0000,86.0000,86.0000,86.0000,86.0000,79.0000,76.0000,76.0000,76.0000,75.0000,75.0000,75.0000,73.0000,73.0000,73.0000,73.0000,62.0000,62.0000,62.0000,65.0000,65.0000,65.0000,65.0000,71.0000,71.0000,71.0000,77.0000,77.0000,79.0000,79.0000,87.0000,87.0000,87.0000,87.0000,82.0000,82.0000,82.0000,71.0000,71.0000,71.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,74.0000,79.0000,79.0000,72.0000,79.0000,79.0000,79.0000,79.0000,79.0000,79.0000,80.0000,81.0000,81.0000,81.0000,82.0000,82.0000,80.0000,80.0000,69.0000,69.0000,69.0000,69.0000,69.0000,69.0000,90.0000,91.0000,91.0000,91.0000,100.0000,100.0000,100.0000,96.0000,96.0000,99.0000,99.0000,96.0000,96.0000,99.0000,99.0000,107.0000,93.0000,93.0000,99.0000,99.0000,99.0000,99.0000,99.0000,99.0000,99.0000,100.0000,100.0000,100.0000,101.0000,102.0000,102.0000,102.0000,101.0000,102.0000,97.0000,97.0000,96.0000,96.0000,96.0000,96.0000,96.0000,96.0000,96.0000,96.0000,96.0000,96.0000,111.0000,111.0000,102.0000,99.0000,93.7871,93.0000,93.0000,92.0000,93.0000,93.0000,93.0000,91.0000,91.0000,91.0000,96.0000,96.0000,109.0000,113.0000,113.0000,113.0000,113.0000,127.0000,97.0000,92.0000,92.0000,92.0000,92.0000,92.0000,92.0000,93.0000,96.0000,96.0000,93.0000,93.0000,93.0000,96.0000,96.0000,82.0000,82.0000,99.0000,99.0000,99.0000,99.0000,103.0000,103.0000,101.0000,97.0000,97.0000,97.0000,95.0000,95.0000,95.0000,95.0000,95.0000,95.0000,95.0000,106.0000,106.0000,98.0000,97.0000,98.0000,98.0000,98.0000,98.0000,98.0000,103.0000,107.0000,103.0000,103.0000,103.0000,107.0000,107.0000,107.0000,124.0000,124.0000,124.0000,124.0000,100.0000,100.0000,100.0000,100.0000,103.0000,103.0000,103.0000,103.0000,103.0000,103.0000,112.0000,111.0000,111.9655,111.9655,112.0000,112.0000,116.0000,116.0000,116.0000,116.0000,116.0000,109.0000,99.0000,99.0000,99.0000,89.0000,89.0000,89.0000,99.0000,105.0000,102.0000,102.0000,105.0000,105.0000,105.0000,105.0000,105.0000,116.0000,119.0000,119.0000,119.0000,119.0000,120.0000,126.0000,115.0000,115.0000,120.0000,120.0000,120.0000,120.0000,120.0000,122.0000,129.0000,133.0000,133.0000,133.0000,141.0000,151.0000,158.0000,160.0000,160.0000,160.0000,160.0000,160.0000,138.0000);
		List<Double> expectedDetrend = asList(0.8333,0.4667,1.3667,1.2308,1.8462,0.8148,0.9630,0.8519,1.0000,1.0000,1.0500,1.1500,1.2250,0.7879,0.4688,0.6250,1.0312,1.0000,1.4375,1.0000,1.1875,0.8182,0.9394,1.7105,0.7857,1.0000,1.0952,2.0589,0.5405,0.7667,1.2333,1.0714,0.5333,1.1000,0.9333,1.1562,0.5625,1.1875,0.9412,0.5000,1.9252,1.0625,0.7353,0.6279,1.0930,1.0909,0.9773,1.0000,1.0698,0.5814,0.7045,0.8889,1.1250,1.0222,1.0667,0.7333,1.2363,0.6047,1.0000,1.6512,1.0000,1.1860,0.7907,0.5814,0.6383,1.0000,1.0426,1.0208,1.0000,0.8333,1.5358,0.6875,1.0000,1.1778,1.4118,0.8824,1.0000,0.5882,0.5294,1.0571,1.2703,0.9459,1.4054,1.0638,0.5400,0.5294,1.0784,1.1373,1.0000,1.0000,1.0196,0.7255,0.7059,0.9167,1.0625,1.1458,0.9412,1.0000,0.6481,1.4107,1.1111,1.0000,1.0556,1.0000,0.8750,0.5500,0.8500,1.1111,1.2800,0.9000,1.0000,2.6672,0.5800,0.4107,1.0714,1.0000,1.0357,0.9464,1.2500,0.6379,0.5283,1.1961,1.4510,0.7059,1.0000,1.0196,0.5882,0.5962,1.0000,1.1587,1.0159,1.3016,0.9844,0.5781,0.6463,1.0000,1.0000,2.2895,1.0787,0.7978,0.7237,0.8289,1.3947,1.0000,1.3421,1.4868,0.8310,0.6901,0.7042,1.0000,3.3687,1.3944,1.4085,0.8554,0.8169,0.6479,1.2576,1.0000,1.2388,0.9104,1.0000,1.7191,0.6053,1.0921,1.0000,1.1216,0.9054,1.0000,0.6622,0.6486,1.0000,1.2027,1.1622,0.8784,1.0000,0.6282,0.7821,1.0385,3.2260,1.2237,1.0000,0.8553,0.6053,0.4868,1.1558,1.3636,1.1299,1.0000,0.7922,0.6267,0.6400,2.6009,0.9740,1.0000,1.0000,0.8462,1.1441,0.3053,2.1756,1.0737,1.0106,1.0000,0.8864,0.5227,0.6591,1.1282,1.3049,1.3902,0.8659,1.0000,0.5976,0.5696,1.1646,1.2532,1.0000,0.9620,1.1169,0.6364,0.5714,0.8953,1.2208,1.2987,1.1818,0.7955,0.5795,0.4205,1.0000,1.0227,1.1932,1.0114,0.8539,0.5393,0.4719,1.1974,1.1099,1.1099,0.8242,1.0109,0.6533,0.4800,1.0824,0.8824,3.7516,1.0000,1.0118,0.7093,0.5233,1.0465,1.1744,1.0000,0.8556,1.0930,0.5233,1.0250,0.7265,1.0898,1.0690,1.5000,0.7326,0.6236,0.6000,1.1781,1.0959,1.1781,1.0000,0.9726,0.5753,0.7945,1.1358,1.0617,1.1111,1.0000,0.9870,0.9610,0.6494,1.0132,1.0921,1.0395,1.0000,0.9344,0.5246,0.7541,1.0000,1.1429,1.4444,1.2540,0.8750,0.5135,0.5625,1.1562,1.1486,0.8649,1.1467,1.0000,0.5733,1.0861,0.8690,1.0000,1.0000,2.2813,0.9189,0.5270,0.4521,1.0137,1.0411,1.0000,1.0548,0.9589,0.6301,0.6286,1.2500,1.2857,1.0159,0.9841,1.0000,0.6032,0.6349,1.0959,1.0959,1.0000,1.0685,0.9853,0.5224,0.7612,1.0149,1.0635,1.0597,0.9403,0.8060,1.6889,0.7302,1.0714,1.0000,1.0000,2.6381,0.8571,0.6250,0.8393,1.0000,1.2812,1.1719,1.0000,1.0000,0.6515,0.6515,1.1831,1.0141,2.7068,1.0000,0.8592,0.5493,0.7606,1.1594,1.0580,1.3043,1.0000,0.8551,0.6377,0.7681,1.0000,1.1628,1.0930,1.0116,0.9885,0.6977,0.6279,2.8491,1.1026,1.0897,1.0000,0.6933,0.8933,0.5467,1.0000,1.0533,2.1084,1.0667,0.9494,0.6125,0.5526,1.2500,1.8716,0.9157,1.2410,1.0122,0.6579,0.5000,1.1549,1.0000,1.1176,1.0441,0.9811,0.5094,0.6923,1.1042,1.3250,1.2000,0.8750,1.0000,0.7000,0.8000,1.5000,1.0000,1.9057,0.5714,1.0893,0.7288,0.7627,1.1967,0.9833,1.0833,1.2667,1.0000,0.6562,0.5079,1.0159,1.0000,0.9844,1.3594,1.1719,0.6000,0.6533,1.1200,1.4143,0.8214,2.0161,0.8642,1.2196,0.6543,1.0253,0.9753,1.1899,0.9873,1.0897,0.5455,0.5634,1.0290,1.2623,1.1311,0.9836,1.0167,0.7500,0.6000,0.9344,1.4912,1.4737,1.3860,0.6962,0.6429,0.7500,1.8750,0.8235,1.2059,1.0000,1.1912,0.4444,0.6420,2.5054,2.8508,1.0581,1.0000,0.9620,0.7105,0.5132,1.0395,1.0000,1.1067,1.0133,1.0000,0.4795,0.7123,0.7945,2.9607,1.3226,1.3226,0.9538,0.6308,0.7385,1.0000,1.1268,1.0845,1.2254,0.9221,0.4935,0.4430,1.0000,1.0000,1.0230,2.4429,1.4707,0.5122,0.4878,0.8659,1.1549,1.1690,1.1549,0.8784,0.6622,0.7973,1.0000,1.0000,1.1351,1.0676,0.9730,0.6076,0.4557,1.1250,1.2405,1.0000,0.8987,1.0000,0.5949,0.6329,1.0125,1.0864,1.1852,0.9877,1.0732,0.3902,0.5750,1.0250,1.4638,1.1594,1.0000,0.5942,0.5797,0.6957,1.0000,1.1429,1.0000,1.2527,1.1000,0.6600,0.5900,1.0417,2.6165,0.9697,0.9293,1.0312,1.2214,0.6263,0.6667,1.1121,1.1505,1.0000,2.5983,0.4646,0.4949,1.0000,1.1818,1.1111,0.0000,1.0000,0.4200,0.4200,1.0594,0.9902,1.0686,1.0000,1.2376,0.5980,0.5361,1.0000,1.1250,1.0000,1.0417,1.0000,0.4792,0.4896,0.8333,1.0000,1.1979,1.2604,1.0270,0.8449,0.4216,1.1212,0.9809,1.0968,1.0645,1.0109,0.4516,0.5161,0.9785,3.6772,1.0549,1.1978,0.8438,0.3854,0.4037,1.0000,1.1239,1.2389,1.1239,0.7638,0.4536,0.3913,6.4147,1.0000,0.9783,1.1957,2.3420,0.4731,0.4583,0.9688,1.0753,1.0323,1.0860,0.8542,0.5312,0.5122,1.3049,1.0000,0.7980,1.1818,1.0404,0.4466,0.3495,1.0297,1.2371,1.0412,1.0000,0.8632,0.4526,0.4947,1.0000,1.4421,1.4105,1.1158,0.7925,0.4906,0.5102,1.0928,1.3469,1.0000,0.9898,1.1122,0.6531,0.9106,0.9626,1.0971,1.0777,1.0388,0.8879,0.4673,0.4953,1.0000,1.0968,1.0968,1.1613,0.9700,0.5900,0.6200,1.0000,1.2816,1.1942,1.0000,2.0350,0.4466,0.4660,0.9107,1.1892,1.0003,1.1164,0.9911,0.9997,0.5086,1.0000,1.0172,3.4101,1.0948,1.0000,0.5556,0.4040,0.8990,1.1124,1.2022,1.1798,0.7475,0.3714,0.3235,1.1078,1.0857,0.9714,1.1048,1.0000,0.5714,0.6034,1.0000,1.0084,1.0588,1.1597,0.9583,0.6667,0.5739,1.1478,1.2333,0.9500,1.0000,1.0167,0.4917,0.5328,1.0000,1.0000,1.1353,1.0602,1.1206,0.4503,0.4177,1.0688,1.0375,1.0688,1.0000,0.8625,0.4638);
		List<Double> expectedSeason = asList(1.1871,1.1097,1.0249,0.6581,0.6130,1.1860,1.2401);
		List<Double> expectedResidual = asList(1.2664,0.7613,1.1524,0.9924,1.5552,0.7342,0.9396,1.2945,1.6314,0.8432,0.8467,0.9688,1.1039,0.7687,0.7123,1.0196,0.8695,0.8064,1.2109,0.9011,1.1586,1.2433,1.5325,1.4423,0.6336,0.8424,0.9869,2.0089,0.8214,1.2507,1.0399,0.8640,0.4493,0.9912,0.9107,1.7571,0.9176,1.0013,0.7589,0.4212,1.7348,1.0367,1.1174,1.0243,0.9216,0.8797,0.8233,0.9011,1.0438,0.8835,1.1494,0.7495,0.9072,0.8611,0.9612,0.7155,1.8787,0.9864,0.8432,1.3314,0.8424,1.0688,0.7715,0.8835,1.0413,0.8432,0.8407,0.8599,0.9011,0.8131,2.3338,1.1216,0.8432,0.9497,1.1893,0.7951,0.9757,0.8939,0.8637,0.8914,1.0243,0.7969,1.2664,1.0380,0.8206,0.8637,0.9093,0.9170,0.8424,0.9011,0.9948,1.1025,1.1515,0.7729,0.8568,0.9652,0.8481,0.9757,0.9850,2.3014,0.9369,0.8064,0.8892,0.9011,0.8537,0.8358,1.3866,0.9369,1.0321,0.7582,0.9011,2.6024,0.8814,0.6700,0.9034,0.8064,0.8725,0.8528,1.2196,0.9694,0.8618,1.0085,1.1700,0.5946,0.9011,0.9948,0.8939,0.9725,0.8432,0.9344,0.8558,1.1729,0.9605,0.8785,1.0544,0.8432,0.8064,1.9287,0.9720,0.7784,1.0997,1.3523,1.1760,0.8064,1.1306,1.3398,0.8108,1.0488,1.1488,0.8432,2.7164,1.1746,1.2692,0.8346,1.2414,1.0569,1.0604,0.8064,1.0436,0.8204,0.9757,2.6124,0.9874,0.9209,0.8064,0.9448,0.8159,0.9757,1.0062,1.0582,0.8432,0.9698,0.9790,0.7915,0.9757,0.9546,1.2758,0.8756,2.6013,1.0308,0.9011,0.8345,0.9198,0.7942,0.9746,1.0996,0.9518,0.9011,0.7730,0.9523,1.0441,2.1930,0.7854,0.8424,0.9011,0.8256,1.7386,0.4980,1.8345,0.8658,0.8514,0.9011,0.8648,0.7944,1.0752,0.9513,1.0522,1.1711,0.7802,0.9757,0.9081,0.9293,0.9819,1.0105,0.8424,0.8669,1.0897,0.9670,0.9322,0.7550,0.9844,1.0940,1.0649,0.7761,0.8807,0.6859,0.8432,0.8247,1.0051,0.9113,0.8332,0.8196,0.7699,1.0096,0.8950,0.9350,0.7427,0.9863,0.9928,0.7830,0.9126,0.7115,3.1603,0.9011,0.9872,1.0779,0.8536,0.8824,0.9470,0.8424,0.7709,1.0665,0.7952,1.6721,0.6126,0.8787,0.9005,1.3517,0.7148,0.9476,0.9788,0.9934,0.8837,0.9924,0.9011,0.9490,0.8743,1.2961,0.9577,0.8561,0.9360,0.9011,0.9630,1.4604,1.0593,0.8543,0.8806,0.8756,0.9011,0.9117,0.7972,1.2302,0.8432,0.9216,1.2168,1.1300,0.8537,0.7804,0.9176,0.9749,0.9262,0.7286,1.0333,0.9757,0.8713,1.7719,0.7328,0.8064,0.8424,2.0557,0.8966,0.8009,0.7375,0.8547,0.8395,0.8424,0.9505,0.9356,0.9576,1.0254,1.0540,1.0368,0.8558,0.8868,0.9757,0.9166,1.0358,0.9240,0.8837,0.8424,0.9628,0.9613,0.7938,1.2418,0.8558,0.8576,0.8927,0.8473,0.7864,2.5666,1.1911,0.9034,0.8064,0.8424,2.3772,0.8363,0.9498,1.3692,0.8432,1.0332,0.9872,0.9011,0.9757,0.9901,1.0629,0.9976,0.8177,2.2802,0.9011,0.8383,0.8347,1.2407,0.9776,0.8531,1.0988,0.9011,0.8343,0.9690,1.2531,0.8432,0.9376,0.9208,0.9116,0.9645,1.0602,1.0243,2.4023,0.8891,0.9180,0.9011,0.6765,1.3575,0.8918,0.8432,0.8494,1.7761,0.9612,0.9263,0.9308,0.9015,1.0540,1.5092,0.7714,1.1182,0.9876,0.9998,0.8157,0.9738,0.8064,0.9415,0.9409,0.9573,0.7742,1.1294,0.9310,1.0684,1.0109,0.7885,0.9757,1.0637,1.3051,1.2648,0.8064,1.6053,0.5149,1.0628,1.1075,1.2443,1.0091,0.7929,0.9126,1.1414,0.9757,0.9973,0.8286,0.8566,0.8064,0.8292,1.2249,1.1434,0.9118,1.0658,0.9444,1.1404,0.6920,1.8168,0.8432,1.8534,1.0674,0.8645,0.7865,1.0023,0.8897,1.0633,0.8289,0.9191,0.8676,1.0179,0.9529,0.8863,0.9920,1.1397,0.9788,0.7879,1.2025,1.2414,1.2489,0.6793,0.9769,1.2235,1.5810,0.6641,1.0158,0.9011,1.1622,0.6754,1.0473,2.1126,2.2988,0.8914,0.9011,0.9386,1.0797,0.8371,0.8765,0.8064,0.9323,0.9131,0.9757,0.7286,1.1621,0.6699,2.3874,1.1141,1.1918,0.9307,0.9585,1.2047,0.8432,0.9086,0.9136,1.1042,0.8997,0.7500,0.7228,0.8432,0.8064,0.8618,2.2013,1.4350,0.7784,0.7958,0.7301,0.9313,0.9848,1.0407,0.8570,1.0062,1.3007,0.8432,0.8064,0.9562,0.9620,0.9493,0.9233,0.7434,0.9486,1.0003,0.8424,0.8099,0.9757,0.9041,1.0325,0.8537,0.8760,0.9984,0.8900,1.0471,0.5930,0.9380,0.8643,1.1803,0.9767,0.9011,0.5798,0.8810,1.1349,0.8432,0.9216,0.8424,1.1289,1.0733,1.0030,0.9625,0.8783,2.1099,0.8169,0.8374,1.0062,1.8561,1.0217,0.5621,0.8968,0.9692,0.9011,2.5351,0.7061,0.8074,0.8432,0.9530,0.9360,0.0000,0.9757,0.6382,0.6852,0.8933,0.7985,0.9002,0.9011,1.2075,0.9088,0.8745,0.8432,0.9072,0.8424,0.9387,0.9757,0.7282,0.7987,0.7027,0.8064,1.0091,1.1358,1.0021,1.2840,0.6877,0.9454,0.7910,0.9239,0.9592,0.9863,0.6863,0.8420,0.8251,2.9652,0.8887,1.0793,0.8232,0.5857,0.6585,0.8432,0.9063,1.0437,1.0127,0.7452,0.6893,0.6384,5.4088,0.8064,0.8241,1.0774,2.2851,0.7190,0.7477,0.8168,0.8671,0.8696,0.9786,0.8334,0.8073,0.8356,1.1003,0.8064,0.6722,1.0649,1.0151,0.6787,0.5702,0.8682,0.9976,0.8771,0.9011,0.8422,0.6878,0.8071,0.8432,1.1629,1.1882,1.0054,0.7732,0.7455,0.8323,0.9214,1.0861,0.8424,0.8919,1.0852,0.9924,1.4854,0.8117,0.8847,0.9078,0.9361,0.8663,0.7101,0.8081,0.8432,0.8844,0.9239,1.0464,0.9464,0.8966,1.0114,0.8432,1.0334,1.0060,0.9011,1.9855,0.6787,0.7602,0.7679,0.9589,0.8427,1.0060,0.9670,1.5192,0.8297,0.8432,0.8203,2.8726,0.9866,0.9757,0.8442,0.6591,0.7580,0.8970,1.0128,1.0631,0.7293,0.5644,0.5278,0.9341,0.8755,0.8183,0.9955,0.9757,0.8684,0.9844,0.8432,0.8131,0.8919,1.0450,0.9350,1.0131,0.9363,0.9678,0.9945,0.8003,0.9011,0.9920,0.7472,0.8692,0.8432,0.8064,0.9564,0.9553,1.0933,0.6843,0.6815,0.9012,0.8366,0.9003,0.9011,0.8415,0.7048);

		Serie serie = new Serie(webTraffic(), 7)
						.multiplicative()
						.smoothWithMedian();
		
		assertThat(serie.trend(),    deltaEqual(expectedMM, 0.0001));
		assertThat(serie.detrend(),  deltaEqual(expectedDetrend, 0.0001));
		assertThat(sum(serie.season()), closeTo(7., 0.01));
		assertThat(serie.season(),   deltaEqual(expectedSeason, 0.0123));
		assertThat(serie.residual(), deltaEqual(expectedResidual, 0.0562));
	}
	
	private List<Double> y() {
		return new ArrayList<>(asList(50.,61.,73.,84., 59.,72.,89.,100., 72.,93.,110.,126., 80.,100.,123.,140.));
	}
	
	private ArrayList<Double> z() {
		return new ArrayList<>(asList(
				50.,61.,73.,84., 55.,66.,78.,89., 59.,71.,83.,94., 64.,76.,88.,99.,
				50.,61.,73.,84., 55.,66.,78.,89., 59.,71.,83.,94., 64.,76.,88.,99.,
				50.,61.,73.,84., 55.,66.,78.,89., 59.,71.,83.,94., 64.,76.,88.,99.
			   ));
	}
	
	private List<Double> webTraffic() {
		return asList(32.0000,27.0000,30.0000,25.0000,14.0000,41.0000,32.0000,48.0000,22.0000,26.0000,23.0000,27.0000,40.0000,42.0000,46.0000,49.0000,26.0000,15.0000,20.0000,33.0000,32.0000,46.0000,32.0000,38.0000,27.0000,31.0000,65.0000,33.0000,42.0000,46.0000,76.1802,20.0000,23.0000,37.0000,30.0000,16.0000,33.0000,28.0000,37.0000,18.0000,38.0000,32.0000,16.0000,61.6076,34.0000,25.0000,27.0000,47.0000,48.0000,43.0000,44.0000,46.0000,25.0000,31.0000,40.0000,45.0000,46.0000,48.0000,33.0000,56.8693,26.0000,43.0000,71.0000,43.0000,51.0000,34.0000,25.0000,30.0000,47.0000,49.0000,49.0000,48.0000,40.0000,73.7162,33.0000,45.0000,53.0000,48.0000,30.0000,34.0000,20.0000,18.0000,37.0000,47.0000,35.0000,52.0000,50.0000,27.0000,27.0000,55.0000,58.0000,51.0000,51.0000,52.0000,37.0000,36.0000,44.0000,51.0000,55.0000,48.0000,54.0000,35.0000,76.1802,60.0000,54.0000,57.0000,40.0000,35.0000,22.0000,34.0000,50.0000,64.0000,45.0000,50.0000,133.3590,29.0000,23.0000,60.0000,56.0000,58.0000,53.0000,70.0000,37.0000,28.0000,61.0000,74.0000,36.0000,51.0000,52.0000,30.0000,31.0000,59.0000,73.0000,64.0000,82.0000,63.0000,37.0000,53.0000,89.0000,89.0000,203.7676,96.0000,71.0000,55.0000,63.0000,106.0000,76.0000,102.0000,113.0000,59.0000,49.0000,50.0000,71.0000,239.1803,99.0000,100.0000,71.0000,58.0000,46.0000,83.0000,66.0000,83.0000,61.0000,67.0000,130.6513,46.0000,83.0000,76.0000,83.0000,67.0000,74.0000,49.0000,48.0000,74.0000,89.0000,86.0000,65.0000,78.0000,49.0000,61.0000,81.0000,245.1722,93.0000,76.0000,65.0000,46.0000,37.0000,89.0000,105.0000,87.0000,77.0000,61.0000,47.0000,48.0000,195.0662,75.0000,91.0000,91.0000,77.0000,104.1093,29.0000,206.6820,102.0000,95.0000,94.0000,78.0000,46.0000,58.0000,88.0000,107.0000,114.0000,71.0000,82.0000,49.0000,45.0000,92.0000,99.0000,79.0000,76.0000,86.0000,49.0000,44.0000,77.0000,94.0000,100.0000,91.0000,70.0000,51.0000,37.0000,88.0000,90.0000,105.0000,89.0000,76.0000,48.0000,42.0000,91.0000,101.0000,101.0000,75.0000,93.0000,49.0000,36.0000,92.0000,75.0000,318.8833,85.0000,86.0000,61.0000,45.0000,90.0000,101.0000,86.0000,77.0000,94.0000,45.0000,96.3507,70.0000,105.0000,103.0000,105.0000,63.0000,49.8848,48.0000,86.0000,80.0000,86.0000,73.0000,71.0000,42.0000,58.0000,92.0000,86.0000,90.0000,81.0000,76.0000,74.0000,50.0000,77.0000,83.0000,79.0000,76.0000,57.0000,32.0000,46.0000,61.0000,72.0000,91.0000,79.0000,63.0000,38.0000,36.0000,74.0000,85.0000,64.0000,86.0000,75.0000,43.0000,91.2351,73.0000,84.0000,84.0000,166.5367,68.0000,39.0000,33.0000,74.0000,76.0000,73.0000,77.0000,70.0000,46.0000,44.0000,80.0000,81.0000,64.0000,62.0000,63.0000,38.0000,40.0000,80.0000,80.0000,73.0000,78.0000,67.0000,35.0000,51.0000,68.0000,67.0000,71.0000,63.0000,54.0000,119.9147,46.0000,90.0000,84.0000,61.0000,160.9233,48.0000,35.0000,47.0000,56.0000,82.0000,75.0000,64.0000,66.0000,43.0000,43.0000,84.0000,72.0000,192.1799,71.0000,61.0000,39.0000,54.0000,80.0000,73.0000,90.0000,69.0000,59.0000,44.0000,53.0000,84.0000,100.0000,94.0000,87.0000,86.0000,60.0000,54.0000,242.1732,86.0000,85.0000,78.0000,52.0000,67.0000,41.0000,75.0000,79.0000,158.1287,80.0000,75.0000,49.0000,42.0000,95.0000,155.3423,76.0000,103.0000,83.0000,50.0000,38.0000,82.0000,68.0000,76.0000,71.0000,52.0000,27.0000,36.0000,53.0000,53.0000,48.0000,35.0000,40.0000,28.0000,32.0000,60.0000,56.0000,106.7174,32.0000,61.0000,43.0000,45.0000,73.0000,59.0000,65.0000,76.0000,60.0000,42.0000,32.0000,64.0000,64.0000,63.0000,87.0000,75.0000,45.0000,49.0000,84.0000,99.0000,69.0000,169.3554,70.0000,96.3507,53.0000,81.0000,79.0000,94.0000,78.0000,85.0000,42.0000,40.0000,71.0000,77.0000,69.0000,60.0000,61.0000,45.0000,36.0000,57.0000,85.0000,84.0000,79.0000,55.0000,36.0000,42.0000,105.0000,56.0000,82.0000,68.0000,81.0000,36.0000,52.0000,215.4662,245.1722,91.0000,86.0000,76.0000,54.0000,39.0000,79.0000,75.0000,83.0000,76.0000,73.0000,35.0000,52.0000,58.0000,183.5646,82.0000,82.0000,62.0000,41.0000,48.0000,65.0000,80.0000,77.0000,87.0000,71.0000,38.0000,35.0000,79.0000,87.0000,89.0000,212.5314,127.9528,42.0000,40.0000,71.0000,82.0000,83.0000,82.0000,65.0000,49.0000,59.0000,74.0000,74.0000,84.0000,79.0000,72.0000,48.0000,36.0000,81.0000,98.0000,79.0000,71.0000,79.0000,47.0000,50.0000,81.0000,88.0000,96.0000,80.0000,88.0000,32.0000,46.0000,82.0000,101.0000,80.0000,69.0000,41.0000,40.0000,48.0000,90.0000,104.0000,91.0000,114.0000,110.0000,66.0000,59.0000,100.0000,251.1886,96.0000,92.0000,99.0000,117.2549,62.0000,66.0000,119.0000,107.0000,93.0000,257.2292,46.0000,49.0000,99.0000,117.0000,110.0000,0.0000,100.0000,42.0000,42.0000,107.0000,101.0000,109.0000,102.0000,125.0000,61.0000,52.0000,97.0000,108.0000,96.0000,100.0000,96.0000,46.0000,47.0000,80.0000,96.0000,115.0000,121.0000,114.0000,93.7871,43.0000,111.0000,92.0000,102.0000,99.0000,93.0000,42.0000,48.0000,91.0000,334.6297,96.0000,109.0000,81.0000,37.0000,44.0000,113.0000,127.0000,140.0000,127.0000,97.0000,44.0000,36.0000,590.1497,92.0000,90.0000,110.0000,215.4662,44.0000,44.0000,93.0000,100.0000,96.0000,101.0000,82.0000,51.0000,42.0000,107.0000,99.0000,79.0000,117.0000,103.0000,46.0000,36.0000,104.0000,120.0000,101.0000,97.0000,82.0000,43.0000,47.0000,95.0000,137.0000,134.0000,106.0000,84.0000,52.0000,50.0000,106.0000,132.0000,98.0000,97.0000,109.0000,64.0000,93.7871,103.0000,113.0000,111.0000,107.0000,95.0000,50.0000,53.0000,124.0000,136.0000,136.0000,144.0000,97.0000,59.0000,62.0000,100.0000,132.0000,123.0000,103.0000,209.6033,46.0000,48.0000,102.0000,132.0000,112.0000,125.0000,111.0000,111.9655,59.0000,116.0000,118.0000,395.5701,127.0000,109.0000,55.0000,40.0000,89.0000,99.0000,107.0000,105.0000,74.0000,39.0000,33.0000,113.0000,114.0000,102.0000,116.0000,105.0000,60.0000,70.0000,119.0000,120.0000,126.0000,138.0000,115.0000,84.0000,66.0000,132.0000,148.0000,114.0000,120.0000,122.0000,59.0000,65.0000,129.0000,133.0000,151.0000,141.0000,158.0000,68.0000,66.0000,171.0000,166.0000,171.0000,160.0000,138.0000,64.0000,40.0000,272.4335,138.0000);
	}
}